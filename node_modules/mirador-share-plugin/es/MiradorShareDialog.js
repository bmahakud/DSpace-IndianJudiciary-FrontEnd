function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogTitle from '@material-ui/core/DialogTitle';
import Divider from '@material-ui/core/Divider';
import Link from '@material-ui/core/Link';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import { SnackbarProvider, enqueueSnackbar } from 'notistack';
import { getManifestoInstance } from 'mirador/dist/es/src/state/selectors/manifests';
import { getContainerId } from 'mirador/dist/es/src/state/selectors/config';
import ScrollIndicatedDialogContent from 'mirador/dist/es/src/containers/ScrollIndicatedDialogContent';
import MiradorShareEmbed from './MiradorShareEmbed';
import IiiifIcon from './IiifIcon';

var mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {
  var windowId = _ref.windowId;
  return {
    closeShareDialog: function closeShareDialog() {
      return dispatch({ type: 'CLOSE_WINDOW_DIALOG', windowId: windowId });
    }
  };
};

var mapStateToProps = function mapStateToProps(state, _ref2) {
  var windowId = _ref2.windowId;

  var miradorSharePluginConfig = state.config.miradorSharePlugin || {};
  var embedOption = miradorSharePluginConfig.embedOption || {};

  return {
    containerId: getContainerId(state),
    displayEmbedOption: embedOption.enabled,
    displayShareLink: miradorSharePluginConfig.shareLink && miradorSharePluginConfig.shareLink.enabled,
    embedUrlReplacePattern: embedOption.embedUrlReplacePattern,
    embedIframeAttributes: embedOption.embedIframeAttributes,
    embedIframeTitle: embedOption.embedIframeTitle,
    manifestIdReplacePattern: miradorSharePluginConfig.shareLink && miradorSharePluginConfig.shareLink.manifestIdReplacePattern,
    iiifInfoLink: miradorSharePluginConfig.iiifInfoLink,
    manifestId: (getManifestoInstance(state, { windowId: windowId }) || {}).id,
    open: state.windowDialogs[windowId] && state.windowDialogs[windowId].openDialog === 'share',
    syncIframeDimensions: embedOption.syncIframeDimensions
  };
};

/**
 * MiradorShareDialog ~
*/
export var MiradorShareDialog = function (_Component) {
  _inherits(MiradorShareDialog, _Component);

  function MiradorShareDialog(props) {
    _classCallCheck(this, MiradorShareDialog);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      shareLinkText: _this.shareLink()
    };

    _this.handleShareLinkChange = _this.handleShareLinkChange.bind(_this);
    return _this;
  }

  MiradorShareDialog.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var manifestId = this.props.manifestId;

    if (manifestId !== prevProps.manifestId) {
      this.handleShareLinkChange(this.shareLink());
    }
  };

  MiradorShareDialog.prototype.dragAndDropUrl = function dragAndDropUrl() {
    var manifestId = this.props.manifestId;

    var baseUrl = manifestId;

    return baseUrl + '?manifest=' + manifestId;
  };

  MiradorShareDialog.prototype.whatIsThisLink = function whatIsThisLink() {
    var iiifInfoLink = this.props.iiifInfoLink;


    if (!iiifInfoLink) return null;

    return React.createElement(
      React.Fragment,
      null,
      ' ',
      React.createElement(
        Link,
        { href: iiifInfoLink },
        'What is IIIF?'
      )
    );
  };

  MiradorShareDialog.prototype.shareLink = function shareLink() {
    var _props = this.props,
        manifestId = _props.manifestId,
        manifestIdReplacePattern = _props.manifestIdReplacePattern;

    if (!manifestId) return null;

    return manifestId.replace(manifestIdReplacePattern[0], manifestIdReplacePattern[1]);
  };

  MiradorShareDialog.prototype.handleShareLinkChange = function handleShareLinkChange(value) {
    this.setState({
      shareLinkText: value
    });
  };

  /**
   * Returns the rendered component
  */


  MiradorShareDialog.prototype.render = function render() {
    var _this2 = this;

    var _props2 = this.props,
        classes = _props2.classes,
        closeShareDialog = _props2.closeShareDialog,
        containerId = _props2.containerId,
        displayEmbedOption = _props2.displayEmbedOption,
        displayShareLink = _props2.displayShareLink,
        embedIframeAttributes = _props2.embedIframeAttributes,
        embedIframeTitle = _props2.embedIframeTitle,
        embedUrlReplacePattern = _props2.embedUrlReplacePattern,
        manifestId = _props2.manifestId,
        open = _props2.open,
        syncIframeDimensions = _props2.syncIframeDimensions;
    var shareLinkText = this.state.shareLinkText;


    if (!open) return React.createElement(React.Fragment, null);

    return React.createElement(
      Dialog,
      {
        container: document.querySelector('#' + containerId + ' .mirador-viewer'),
        onClose: closeShareDialog,
        open: open
      },
      React.createElement(
        DialogTitle,
        { disableTypography: true, className: classes.h2 },
        React.createElement(
          Typography,
          { variant: 'h2' },
          'Share'
        )
      ),
      React.createElement(SnackbarProvider, {
        maxSnack: 1,
        anchorOrigin: {
          vertical: 'top',
          horizontal: 'center'
        }
      }),
      React.createElement(
        ScrollIndicatedDialogContent,
        null,
        displayShareLink && React.createElement(
          React.Fragment,
          null,
          React.createElement(
            Typography,
            { className: classes.h3, variant: 'h3' },
            'Share link'
          ),
          React.createElement(
            'div',
            { className: classes.inputContainer },
            React.createElement(TextField, {
              defaultValue: shareLinkText,
              fullWidth: true,
              variant: 'filled',
              onChange: function onChange(e) {
                return _this2.handleShareLinkChange(e && e.target && e.target.value);
              },
              inputProps: { 'aria-label': 'Share link URL', className: classes.shareLinkInput }
            }),
            ' ',
            React.createElement(
              CopyToClipboard,
              { text: shareLinkText },
              React.createElement(
                Button,
                {
                  className: classes.copyButton,
                  variant: 'outlined',
                  color: 'primary',
                  'aria-label': 'Copy link to clipboard',
                  onClick: function onClick() {
                    return enqueueSnackbar(React.createElement(
                      Typography,
                      { variant: 'body1' },
                      'Link copied to clipboard!'
                    ), { variant: 'success' });
                  }
                },
                'Copy'
              )
            )
          ),
          React.createElement(Divider, null)
        ),
        displayEmbedOption && React.createElement(
          React.Fragment,
          null,
          React.createElement(
            Typography,
            { className: classes.h3, variant: 'h3' },
            'Embed'
          ),
          React.createElement(MiradorShareEmbed, {
            embedIframeAttributes: embedIframeAttributes,
            embedIframeTitle: embedIframeTitle,
            embedUrlReplacePattern: embedUrlReplacePattern,
            syncIframeDimensions: syncIframeDimensions,
            manifestId: manifestId
          }),
          React.createElement(Divider, null)
        ),
        React.createElement(
          Typography,
          { className: classes.h3, variant: 'h3' },
          'Add to another viewer'
        ),
        React.createElement(
          Grid,
          { container: true, spacing: 1, className: classes.grid },
          React.createElement(
            Grid,
            { item: true, xs: true },
            React.createElement(
              Typography,
              { variant: 'body1' },
              'Drag & drop IIIF icon to add this resource to any IIIF viewer.'
            ),
            React.createElement(
              Link,
              { href: this.dragAndDropUrl(), className: classes.iiifLink },
              React.createElement(IiiifIcon, { className: classes.iiifIcon })
            )
          ),
          React.createElement(
            Grid,
            { item: true, xs: 1 },
            React.createElement(
              Typography,
              { variant: 'body1' },
              'or'
            )
          ),
          React.createElement(
            Grid,
            { item: true, xs: true },
            React.createElement(
              Typography,
              { variant: 'body1' },
              'Copy & paste the resource\'s manifest into any IIIF viewer.'
            ),
            React.createElement(
              CopyToClipboard,
              { text: this.dragAndDropUrl() },
              React.createElement(
                Button,
                {
                  className: classes.copyButton,
                  variant: 'outlined',
                  color: 'primary',
                  'aria-label': 'Copy manifest to clipboard',
                  onClick: function onClick() {
                    return enqueueSnackbar(React.createElement(
                      Typography,
                      { variant: 'body1' },
                      'Manifest copied to clipboard!'
                    ), { variant: 'success' });
                  }
                },
                'Copy'
              )
            )
          )
        ),
        React.createElement(
          Typography,
          { variant: 'body1' },
          this.whatIsThisLink()
        )
      ),
      React.createElement(
        DialogActions,
        null,
        React.createElement(
          Button,
          { onClick: closeShareDialog, color: 'primary' },
          'Close'
        )
      )
    );
  };

  return MiradorShareDialog;
}(Component);

MiradorShareDialog.propTypes = process.env.NODE_ENV !== "production" ? {
  classes: PropTypes.shape({
    copyButton: PropTypes.string,
    h2: PropTypes.string,
    h3: PropTypes.string,
    iiifIcon: PropTypes.string,
    iiifLink: PropTypes.string,
    inputContainer: PropTypes.string,
    shareLinkInput: PropTypes.string,
    grid: PropTypes.string
  }).isRequired,
  closeShareDialog: PropTypes.func.isRequired,
  containerId: PropTypes.string.isRequired,
  displayEmbedOption: PropTypes.bool,
  displayShareLink: PropTypes.bool,
  iiifInfoLink: PropTypes.string,
  embedIframeAttributes: PropTypes.string,
  embedIframeTitle: PropTypes.string,
  embedUrlReplacePattern: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)])),
  manifestIdReplacePattern: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)])),
  manifestId: PropTypes.string,
  open: PropTypes.bool,
  syncIframeDimensions: PropTypes.shape({
    height: PropTypes.shape({ param: PropTypes.string }),
    width: PropTypes.shape({ param: PropTypes.string })
  })
} : {};

MiradorShareDialog.defaultProps = {
  displayEmbedOption: false,
  displayShareLink: false,
  iiifInfoLink: 'https://iiif.io',
  embedIframeAttributes: 'allowfullscreen frameborder="0"',
  embedIframeTitle: 'Image viewer',
  embedUrlReplacePattern: [],
  manifestId: '',
  manifestIdReplacePattern: [],
  open: false,
  syncIframeDimensions: {}
};

var styles = function styles(theme) {
  return {
    copyButton: {
      marginLeft: theme.spacing()
    },
    h2: {
      paddingBottom: 0
    },
    h3: {
      marginTop: '20px'
    },
    iiifLink: {
      marginRight: '10px'
    },
    iiifIcon: {
      verticalAlign: 'text-bottom',
      cursor: 'grab',
      paddingTop: '12px'
    },
    inputContainer: {
      alignItems: 'flex-end',
      display: 'flex',
      flexDirection: 'row',
      marginBottom: theme.spacing()
    },
    shareLinkInput: {
      paddingTop: '12px'
    },
    grid: {
      textAlign: 'center',
      paddingTop: '12px'
    }
  };
};

export default {
  target: 'Window',
  mode: 'add',
  name: 'MiradorShareDialog',
  component: withStyles(styles)(MiradorShareDialog),
  mapDispatchToProps: mapDispatchToProps,
  mapStateToProps: mapStateToProps
};