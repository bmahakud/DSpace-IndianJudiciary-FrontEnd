var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import ShareIcon from '@material-ui/icons/ShareSharp';
import { getManifestoInstance } from 'mirador/dist/es/src/state/selectors/manifests';

var shareDialogReducer = function shareDialogReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];

  if (action.type === 'OPEN_WINDOW_DIALOG') {
    var _extends2;

    return _extends({}, state, (_extends2 = {}, _extends2[action.windowId] = {
      openDialog: action.dialogType
    }, _extends2));
  }

  if (action.type === 'CLOSE_WINDOW_DIALOG') {
    var _extends3;

    return _extends({}, state, (_extends3 = {}, _extends3[action.windowId] = {
      openDialog: null
    }, _extends3));
  }
  return state;
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {
  var windowId = _ref.windowId;
  return {
    openShareDialog: function openShareDialog() {
      return dispatch({ type: 'OPEN_WINDOW_DIALOG', windowId: windowId, dialogType: 'share' });
    }
  };
};

var mapStateToProps = function mapStateToProps(state, _ref2) {
  var windowId = _ref2.windowId;
  return {
    iiifInfoLink: state.config.miradorSharePlugin && state.config.miradorSharePlugin.iiifInfoLink,
    manifestId: getManifestoInstance(state, { windowId: windowId }).id
  };
};

var MiradorShare = function (_Component) {
  _inherits(MiradorShare, _Component);

  function MiradorShare() {
    _classCallCheck(this, MiradorShare);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  MiradorShare.prototype.openDialogAndClose = function openDialogAndClose() {
    var _props = this.props,
        openShareDialog = _props.openShareDialog,
        handleClose = _props.handleClose;


    openShareDialog();
    handleClose();
  };

  MiradorShare.prototype.render = function render() {
    var _this2 = this;

    return React.createElement(
      MenuItem,
      { onClick: function onClick() {
          return _this2.openDialogAndClose();
        } },
      React.createElement(
        ListItemIcon,
        null,
        React.createElement(ShareIcon, null)
      ),
      React.createElement(
        ListItemText,
        { primaryTypographyProps: { variant: 'body1' } },
        'Share'
      )
    );
  };

  return MiradorShare;
}(Component);

MiradorShare.propTypes = process.env.NODE_ENV !== "production" ? {
  openShareDialog: PropTypes.func.isRequired,
  handleClose: PropTypes.func.isRequired
} : {};

export default {
  target: 'WindowTopBarPluginMenu',
  mode: 'add',
  name: 'MiradorSharePlugin',
  component: MiradorShare,
  mapDispatchToProps: mapDispatchToProps,
  mapStateToProps: mapStateToProps,
  reducers: {
    windowDialogs: shareDialogReducer
  }
};