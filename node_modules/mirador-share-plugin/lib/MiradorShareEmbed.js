'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _FormControl = require('@material-ui/core/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _FormControlLabel = require('@material-ui/core/FormControlLabel');

var _FormControlLabel2 = _interopRequireDefault(_FormControlLabel);

var _FormLabel = require('@material-ui/core/FormLabel');

var _FormLabel2 = _interopRequireDefault(_FormLabel);

var _Radio = require('@material-ui/core/Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _RadioGroup = require('@material-ui/core/RadioGroup');

var _RadioGroup2 = _interopRequireDefault(_RadioGroup);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _reactCopyToClipboard = require('react-copy-to-clipboard');

var _notistack = require('notistack');

var _EmbedSizeIcon = require('./EmbedSizeIcon');

var _EmbedSizeIcon2 = _interopRequireDefault(_EmbedSizeIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * MiradorShareEmbed ~
*/
var MiradorShareEmbed = function (_Component) {
  _inherits(MiradorShareEmbed, _Component);

  MiradorShareEmbed.sizes = function sizes() {
    return {
      small: {
        iconWidth: 70,
        iconHeight: 52,
        viewerWidth: 560,
        viewerHeight: 420
      },
      medium: {
        iconWidth: 80,
        iconHeight: 60,
        viewerWidth: 640,
        viewerHeight: 480
      },
      large: {
        iconWidth: 90,
        iconHeight: 67,
        viewerWidth: 800,
        viewerHeight: 600
      },
      extraLarge: {
        iconWidth: 100,
        iconHeight: 75,
        viewerWidth: 1024,
        viewerHeight: 768
      }
    };
  };

  function MiradorShareEmbed(props) {
    _classCallCheck(this, MiradorShareEmbed);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      selectedSize: 'small'
    };
    return _this;
  }

  MiradorShareEmbed.prototype.handleSizeSelect = function handleSizeSelect(size) {
    this.setState({
      selectedSize: size
    });
  };

  MiradorShareEmbed.prototype.formControlLabelsForSizes = function formControlLabelsForSizes() {
    var classes = this.props.classes;
    var selectedSize = this.state.selectedSize;

    var sizes = MiradorShareEmbed.sizes();
    var iconColor = (0, _styles.createTheme)().palette.grey[500];
    var icon = function icon(width, height) {
      return _react2.default.createElement(_EmbedSizeIcon2.default, {
        fillColor: iconColor,
        width: width,
        height: height
      });
    };

    return Object.keys(sizes).map(function (sizeKey) {
      var size = sizes[sizeKey];
      return _react2.default.createElement(_FormControlLabel2.default, {
        className: [classes.formControlLabel, selectedSize === sizeKey ? classes.selectedFormControlLabel : ''].join(' '),
        control: _react2.default.createElement(_Radio2.default, {
          checkedIcon: icon(size.iconWidth, size.iconHeight),
          icon: icon(size.iconWidth, size.iconHeight)
        }),
        key: sizeKey,
        label: size.viewerWidth + 'x' + size.viewerHeight,
        labelPlacement: 'top',
        value: sizeKey
      });
    });
  };

  MiradorShareEmbed.prototype.additionalEmbedParams = function additionalEmbedParams() {
    var syncIframeDimensions = this.props.syncIframeDimensions;
    var selectedSize = this.state.selectedSize;

    var size = MiradorShareEmbed.sizes()[selectedSize];

    if (!(syncIframeDimensions.height || syncIframeDimensions.width)) {
      return '';
    }

    var params = [];

    if (syncIframeDimensions.width) {
      params.push(syncIframeDimensions.width.param + '=' + size.viewerWidth);
    }

    if (syncIframeDimensions.height) {
      params.push(syncIframeDimensions.height.param + '=' + size.viewerHeight);
    }

    return '&' + params.join('&');
  };

  MiradorShareEmbed.prototype.embedUrl = function embedUrl() {
    var _props = this.props,
        embedUrlReplacePattern = _props.embedUrlReplacePattern,
        manifestId = _props.manifestId;


    return '' + manifestId.replace(embedUrlReplacePattern[0], embedUrlReplacePattern[1]) + this.additionalEmbedParams();
  };

  MiradorShareEmbed.prototype.embedCode = function embedCode() {
    var _props2 = this.props,
        embedIframeAttributes = _props2.embedIframeAttributes,
        embedIframeTitle = _props2.embedIframeTitle;
    var selectedSize = this.state.selectedSize;

    var size = MiradorShareEmbed.sizes()[selectedSize];

    return '<iframe src="' + this.embedUrl() + '" title="' + embedIframeTitle + '" width="' + size.viewerWidth + '" height="' + size.viewerHeight + '" ' + embedIframeAttributes + '></iframe>';
  };

  /**
   * Returns the rendered component
  */


  MiradorShareEmbed.prototype.render = function render() {
    var _this2 = this;

    var classes = this.props.classes;


    return _react2.default.createElement(
      _react2.default.Fragment,
      null,
      _react2.default.createElement(_notistack.SnackbarProvider, {
        maxSnack: 1,
        anchorOrigin: {
          vertical: 'top',
          horizontal: 'center'
        }
      }),
      _react2.default.createElement(
        _FormControl2.default,
        { component: 'fieldset', className: classes.formControl },
        _react2.default.createElement(
          _FormLabel2.default,
          { component: 'legend', className: classes.legend },
          'Select viewer size'
        ),
        _react2.default.createElement(
          _RadioGroup2.default,
          {
            'aria-label': 'Select viewer size',
            className: classes.radioGroup,
            name: 'viwerSize',
            onChange: function onChange(e) {
              _this2.handleSizeSelect(e.target.value);
            }
          },
          this.formControlLabelsForSizes()
        )
      ),
      _react2.default.createElement(
        _FormControl2.default,
        { component: 'fieldset', className: classes.formControl },
        _react2.default.createElement(
          _FormLabel2.default,
          { className: classes.label, 'for': 'copyCode' },
          'Copy & paste code'
        ),
        _react2.default.createElement(
          'div',
          { className: classes.inputContainer },
          _react2.default.createElement(_TextField2.default, {
            id: 'copyCode',
            fullWidth: true,
            multiline: true,
            rows: 4,
            value: this.embedCode(),
            variant: 'filled'
          }),
          _react2.default.createElement(
            _reactCopyToClipboard.CopyToClipboard,
            { text: this.embedCode() },
            _react2.default.createElement(
              _Button2.default,
              {
                className: classes.copyButton,
                variant: 'outlined',
                color: 'primary',
                'aria-label': 'Copy code to clipboard',
                onClick: function onClick() {
                  return (0, _notistack.enqueueSnackbar)(_react2.default.createElement(
                    _Typography2.default,
                    { variant: 'body1' },
                    'Code copied to clipboard!'
                  ), { variant: 'success' });
                }
              },
              'Copy'
            )
          )
        )
      )
    );
  };

  return MiradorShareEmbed;
}(_react.Component);

MiradorShareEmbed.propTypes = process.env.NODE_ENV !== "production" ? {
  classes: _propTypes2.default.shape({
    copyButton: _propTypes2.default.string,
    formControl: _propTypes2.default.string,
    formControlLabel: _propTypes2.default.string,
    legend: _propTypes2.default.string,
    label: _propTypes2.default.string,
    inputContainer: _propTypes2.default.string,
    radioGroup: _propTypes2.default.string,
    selectedFormControlLabel: _propTypes2.default.string
  }),
  embedIframeAttributes: _propTypes2.default.string.isRequired,
  embedIframeTitle: _propTypes2.default.string.isRequired,
  embedUrlReplacePattern: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(RegExp)])).isRequired,
  manifestId: _propTypes2.default.string,
  syncIframeDimensions: _propTypes2.default.shape({
    height: _propTypes2.default.shape({ param: _propTypes2.default.string }),
    width: _propTypes2.default.shape({ param: _propTypes2.default.string })
  })
} : {};

MiradorShareEmbed.defaultProps = {
  classes: {},
  manifestId: null,
  syncIframeDimensions: {}
};

var styles = function styles(theme) {
  return {
    copyButton: {
      marginLeft: theme.spacing()
    },
    formControl: {
      width: '100%'
    },
    formControlLabel: {
      border: '1px solid ' + theme.palette.grey[500],
      height: '125px',
      flexGrow: 1,
      margin: '0',
      '&:hover': {
        backgroundColor: theme.palette.action.hover
      }
    },
    legend: {
      paddingBottom: theme.spacing(),
      paddingTop: theme.spacing()
    },
    label: {
      paddingBottom: theme.spacing(),
      paddingTop: theme.spacing()
    },
    inputContainer: {
      alignItems: 'flex-end',
      display: 'flex',
      flexDirection: 'row',
      marginBottom: theme.spacing()
    },
    radioGroup: {
      display: 'flex',
      flexDirection: 'row'
    },
    selectedFormControlLabel: {
      backgroundColor: theme.palette.action.selected
    }
  };
};

exports.default = (0, _styles.withStyles)(styles)(MiradorShareEmbed);
module.exports = exports['default'];