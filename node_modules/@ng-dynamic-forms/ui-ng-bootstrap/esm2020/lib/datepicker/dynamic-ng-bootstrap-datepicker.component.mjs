import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from "@angular/core";
import { NgbDatepicker } from "@ng-bootstrap/ng-bootstrap";
import { DynamicFormControlComponent } from "@ng-dynamic-forms/core";
import * as i0 from "@angular/core";
import * as i1 from "@ng-dynamic-forms/core";
import * as i2 from "@ng-bootstrap/ng-bootstrap";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class DynamicNGBootstrapDatePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapDatePickerComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i2.NgbDatepickerConfig }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapDatePickerComponent, selector: "dynamic-ng-bootstrap-datepicker", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, viewQueries: [{ propertyName: "ngbDatePicker", first: true, predicate: NgbDatepicker, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           [weekdays]=\"model.getAdditional('weekdays', config['weekdays'])\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.NgbInputDatepicker, selector: "input[ngbDatepicker]", inputs: ["autoClose", "datepickerClass", "dayTemplate", "dayTemplateData", "displayMonths", "firstDayOfWeek", "footerTemplate", "markDisabled", "minDate", "maxDate", "navigation", "outsideDays", "placement", "restoreFocus", "showWeekNumbers", "startDate", "container", "positionTarget", "weekdays", "disabled"], outputs: ["dateSelect", "navigate", "closed"], exportAs: ["ngbDatepicker"] }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapDatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-datepicker", changeDetection: ChangeDetectionStrategy.Default, template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           [weekdays]=\"model.getAdditional('weekdays', config['weekdays'])\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i2.NgbDatepickerConfig }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], customEvent: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbDatePicker: [{
                type: ViewChild,
                args: [NgbDatepicker]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1uZy1ib290c3RyYXAtZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL3VpLW5nLWJvb3RzdHJhcC9zcmMvbGliL2RhdGVwaWNrZXIvZHluYW1pYy1uZy1ib290c3RyYXAtZGF0ZXBpY2tlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL3VpLW5nLWJvb3RzdHJhcC9zcmMvbGliL2RhdGVwaWNrZXIvZHluYW1pYy1uZy1ib290c3RyYXAtZGF0ZXBpY2tlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRyxPQUFPLEVBQUUsYUFBYSxFQUF1QixNQUFNLDRCQUE0QixDQUFDO0FBQ2hGLE9BQU8sRUFFSCwyQkFBMkIsRUFNOUIsTUFBTSx3QkFBd0IsQ0FBQzs7Ozs7O0FBT2hDLE1BQU0sT0FBTyxxQ0FBc0MsU0FBUSwyQkFBMkI7SUFhbEYsWUFBc0IsYUFBdUMsRUFDdkMsaUJBQStDLEVBQ2xELE1BQTJCO1FBQzFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUh0QixrQkFBYSxHQUFiLGFBQWEsQ0FBMEI7UUFDdkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUE4QjtRQUNsRCxXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQVRwQyxTQUFJLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9DLGdCQUFXLEdBQWdELElBQUksWUFBWSxFQUFFLENBQUM7UUFDOUUsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBUXhELENBQUM7O2tJQWpCUSxxQ0FBcUM7c0hBQXJDLHFDQUFxQyx1U0FXbkMsYUFBYSx1RUM3QjVCLGl0REFxQ0E7MkZEbkJhLHFDQUFxQztrQkFMakQsU0FBUzsrQkFDSSxpQ0FBaUMsbUJBRTFCLHVCQUF1QixDQUFDLE9BQU87NExBR3ZDLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBRUksSUFBSTtzQkFBYixNQUFNO2dCQUNHLE1BQU07c0JBQWYsTUFBTTtnQkFDRyxXQUFXO3NCQUFwQixNQUFNO2dCQUNHLEtBQUs7c0JBQWQsTUFBTTtnQkFFbUIsYUFBYTtzQkFBdEMsU0FBUzt1QkFBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgVW50eXBlZEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgTmdiRGF0ZXBpY2tlciwgTmdiRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gXCJAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcFwiO1xuaW1wb3J0IHtcbiAgICBEeW5hbWljRGF0ZVBpY2tlck1vZGVsLFxuICAgIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgIER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2Vcbn0gZnJvbSBcIkBuZy1keW5hbWljLWZvcm1zL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiZHluYW1pYy1uZy1ib290c3RyYXAtZGF0ZXBpY2tlclwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vZHluYW1pYy1uZy1ib290c3RyYXAtZGF0ZXBpY2tlci5jb21wb25lbnQuaHRtbFwiLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljTkdCb290c3RyYXBEYXRlUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRHluYW1pY0Zvcm1Db250cm9sQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKSBmb3JtTGF5b3V0PzogRHluYW1pY0Zvcm1MYXlvdXQ7XG4gICAgQElucHV0KCkgZ3JvdXAhOiBVbnR5cGVkRm9ybUdyb3VwO1xuICAgIEBJbnB1dCgpIGxheW91dD86IER5bmFtaWNGb3JtQ29udHJvbExheW91dDtcbiAgICBASW5wdXQoKSBtb2RlbCE6IER5bmFtaWNEYXRlUGlja2VyTW9kZWw7XG5cbiAgICBAT3V0cHV0KCkgYmx1cjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGN1c3RvbUV2ZW50OiBFdmVudEVtaXR0ZXI8RHluYW1pY0Zvcm1Db250cm9sQ3VzdG9tRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSBmb2N1czogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAVmlld0NoaWxkKE5nYkRhdGVwaWNrZXIpIG5nYkRhdGVQaWNrZXIhOiBOZ2JEYXRlcGlja2VyO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGxheW91dFNlcnZpY2U6IER5bmFtaWNGb3JtTGF5b3V0U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdmFsaWRhdGlvblNlcnZpY2U6IER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIGNvbmZpZzogTmdiRGF0ZXBpY2tlckNvbmZpZykge1xuICAgICAgICBzdXBlcihsYXlvdXRTZXJ2aWNlLCB2YWxpZGF0aW9uU2VydmljZSk7XG4gICAgfVxufVxuIiwiPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuXG4gICAgPGlucHV0IG5nYkRhdGVwaWNrZXIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiAjZGF0ZXBpY2tlcj1cIm5nYkRhdGVwaWNrZXJcIlxuICAgICAgICAgICBbY2xhc3MuaXMtaW52YWxpZF09XCJzaG93RXJyb3JNZXNzYWdlc1wiXG4gICAgICAgICAgIFtkaXNwbGF5TW9udGhzXT1cIm1vZGVsLmdldEFkZGl0aW9uYWwoJ2Rpc3BsYXlNb250aHMnLCBjb25maWdbJ2Rpc3BsYXlNb250aHMnXSlcIlxuICAgICAgICAgICBbZmlyc3REYXlPZldlZWtdPVwibW9kZWwuZ2V0QWRkaXRpb25hbCgnZmlyc3REYXlPZldlZWsnLCBjb25maWdbJ2ZpcnN0RGF5T2ZXZWVrJ10pXCJcbiAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJtb2RlbC5pZFwiXG4gICAgICAgICAgIFtpZF09XCJpZFwiXG4gICAgICAgICAgIFttYXhEYXRlXT1cIm1vZGVsLm1heFwiXG4gICAgICAgICAgIFttaW5EYXRlXT1cIm1vZGVsLm1pblwiXG4gICAgICAgICAgIFtuYW1lXT1cIm1vZGVsLm5hbWVcIlxuICAgICAgICAgICBbbmF2aWdhdGlvbl09XCJtb2RlbC5nZXRBZGRpdGlvbmFsKCduYXZpZ2F0aW9uJywgY29uZmlnWyduYXZpZ2F0aW9uJ10pXCJcbiAgICAgICAgICAgW25nQ2xhc3NdPVwiZ2V0Q2xhc3MoJ2VsZW1lbnQnLCAnY29udHJvbCcpXCJcbiAgICAgICAgICAgW291dHNpZGVEYXlzXT1cIm1vZGVsLmdldEFkZGl0aW9uYWwoJ291dHNpZGVEYXlzJywgY29uZmlnWydvdXRzaWRlRGF5cyddKVwiXG4gICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJtb2RlbC5wbGFjZWhvbGRlclwiXG4gICAgICAgICAgIFtwbGFjZW1lbnRdPVwibW9kZWwuZ2V0QWRkaXRpb25hbCgncGxhY2VtZW50JywgJ2JvdHRvbS1sZWZ0JylcIlxuICAgICAgICAgICBbc2hvd1dlZWtOdW1iZXJzXT1cIm1vZGVsLmdldEFkZGl0aW9uYWwoJ3Nob3dXZWVrTnVtYmVycycsIGNvbmZpZ1snc2hvd1dlZWtOdW1iZXJzJ10pXCJcbiAgICAgICAgICAgW3N0YXJ0RGF0ZV09XCJtb2RlbC5mb2N1c2VkRGF0ZVwiXG4gICAgICAgICAgIFt3ZWVrZGF5c109XCJtb2RlbC5nZXRBZGRpdGlvbmFsKCd3ZWVrZGF5cycsIGNvbmZpZ1snd2Vla2RheXMnXSlcIlxuICAgICAgICAgICAoYmx1cik9XCJvbkJsdXIoJGV2ZW50KVwiXG4gICAgICAgICAgIChkYXRlU2VsZWN0KT1cIm9uQ3VzdG9tRXZlbnQoJGV2ZW50LCAnZGF0ZVNlbGVjdCcpXCJcbiAgICAgICAgICAgKGNsb3NlZCk9XCJvbkN1c3RvbUV2ZW50KCRldmVudCwgJ2Nsb3NlZCcpXCJcbiAgICAgICAgICAgKGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICAgKGZvY3VzKT1cIm9uRm9jdXMoJGV2ZW50KVwiPlxuXG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxuXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJkYXRlcGlja2VyLnRvZ2dsZSgpXCI+XG5cbiAgICAgICAgICAgIDxpbWcgKm5nSWY9XCJtb2RlbC50b2dnbGVJY29uXCIgW3NyY109XCJtb2RlbC50b2dnbGVJY29uXCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCIvPlxuICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJtb2RlbC50b2dnbGVMYWJlbFwiPnt7IG1vZGVsLnRvZ2dsZUxhYmVsIH19PC9zcGFuPlxuXG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgPC9kaXY+XG5cbjwvZGl2PlxuIl19