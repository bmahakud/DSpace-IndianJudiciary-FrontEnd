import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from "@angular/core";
import { DynamicFormControlComponent } from "@ng-dynamic-forms/core";
import * as i0 from "@angular/core";
import * as i1 from "@ng-dynamic-forms/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "ngx-mask";
export class DynamicNGBootstrapInputComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapInputComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapInputComponent, selector: "dynamic-ng-bootstrap-input", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input *ngIf=\"model.inputType === 'file'; else maskedInput\" class=\"form-control-file\"\n           [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <ng-template #maskedInput>\n        <input class=\"form-control\"\n               [attr.accept]=\"model.accept\"\n               [attr.max]=\"model.max\"\n               [attr.min]=\"model.min\"\n               [attr.multiple]=\"model.multiple\"\n               [attr.step]=\"model.step\"\n               [autocomplete]=\"model.autoComplete\"\n               [autofocus]=\"model.autoFocus\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [dynamicList]=\"model.listId\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [maxlength]=\"model.maxLength\"\n               [minlength]=\"model.minLength\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [pattern]=\"model.pattern\"\n               [placeholder]=\"model.placeholder\"\n               [readonly]=\"model.readOnly\"\n               [required]=\"model.required\"\n               [spellcheck]=\"model.spellCheck\"\n               [tabindex]=\"model.tabIndex\"\n               [mask]=\"model.mask\"\n               [specialCharacters]=\"model.maskConfig?.specialCharacters\"\n               [patterns]=\"model.maskConfig?.patterns\"\n               [prefix]=\"model.maskConfig?.prefix\"\n               [suffix]=\"model.maskConfig?.suffix\"\n               [thousandSeparator]=\"model.maskConfig?.thousandSeparator\"\n               [decimalMarker]=\"model.maskConfig?.decimalMarker\"\n               [dropSpecialCharacters]=\"model.maskConfig?.dropSpecialCharacters\"\n               [hiddenInput]=\"model.maskConfig?.hiddenInput\"\n               [showMaskTyped]=\"model.maskConfig?.showMaskTyped\"\n               [placeHolderCharacter]=\"model.maskConfig?.placeHolderCharacter\"\n               [shownMaskExpression]=\"model.maskConfig?.shownMaskExpression\"\n               [showTemplate]=\"model.maskConfig?.showTemplate\"\n               [clearIfNotMatch]=\"model.maskConfig.clearIfNotMatch\"\n               [validation]=\"model.maskConfig.validation\"\n               [separatorLimit]=\"model.maskConfig.separatorLimit\"\n               [allowNegativeNumbers]=\"model.maskConfig.allowNegativeNumbers\"\n               [leadZeroDateTime]=\"model.maskConfig.leadZeroDateTime\"\n               [type]=\"model.inputType\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/>\n    </ng-template>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n    </datalist>\n\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { kind: "directive", type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i4.MaskDirective, selector: "input[mask], textarea[mask]", inputs: ["mask", "specialCharacters", "patterns", "prefix", "suffix", "thousandSeparator", "decimalMarker", "dropSpecialCharacters", "hiddenInput", "showMaskTyped", "placeHolderCharacter", "shownMaskExpression", "showTemplate", "clearIfNotMatch", "validation", "separatorLimit", "allowNegativeNumbers", "leadZeroDateTime", "triggerOnMaskChange"], outputs: ["maskFilled"], exportAs: ["mask", "ngxMask"] }, { kind: "directive", type: i1.DynamicListDirective, selector: "[dynamicList]", inputs: ["dynamicList"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapInputComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-input", changeDetection: ChangeDetectionStrategy.Default, template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input *ngIf=\"model.inputType === 'file'; else maskedInput\" class=\"form-control-file\"\n           [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <ng-template #maskedInput>\n        <input class=\"form-control\"\n               [attr.accept]=\"model.accept\"\n               [attr.max]=\"model.max\"\n               [attr.min]=\"model.min\"\n               [attr.multiple]=\"model.multiple\"\n               [attr.step]=\"model.step\"\n               [autocomplete]=\"model.autoComplete\"\n               [autofocus]=\"model.autoFocus\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [dynamicList]=\"model.listId\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [maxlength]=\"model.maxLength\"\n               [minlength]=\"model.minLength\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [pattern]=\"model.pattern\"\n               [placeholder]=\"model.placeholder\"\n               [readonly]=\"model.readOnly\"\n               [required]=\"model.required\"\n               [spellcheck]=\"model.spellCheck\"\n               [tabindex]=\"model.tabIndex\"\n               [mask]=\"model.mask\"\n               [specialCharacters]=\"model.maskConfig?.specialCharacters\"\n               [patterns]=\"model.maskConfig?.patterns\"\n               [prefix]=\"model.maskConfig?.prefix\"\n               [suffix]=\"model.maskConfig?.suffix\"\n               [thousandSeparator]=\"model.maskConfig?.thousandSeparator\"\n               [decimalMarker]=\"model.maskConfig?.decimalMarker\"\n               [dropSpecialCharacters]=\"model.maskConfig?.dropSpecialCharacters\"\n               [hiddenInput]=\"model.maskConfig?.hiddenInput\"\n               [showMaskTyped]=\"model.maskConfig?.showMaskTyped\"\n               [placeHolderCharacter]=\"model.maskConfig?.placeHolderCharacter\"\n               [shownMaskExpression]=\"model.maskConfig?.shownMaskExpression\"\n               [showTemplate]=\"model.maskConfig?.showTemplate\"\n               [clearIfNotMatch]=\"model.maskConfig.clearIfNotMatch\"\n               [validation]=\"model.maskConfig.validation\"\n               [separatorLimit]=\"model.maskConfig.separatorLimit\"\n               [allowNegativeNumbers]=\"model.maskConfig.allowNegativeNumbers\"\n               [leadZeroDateTime]=\"model.maskConfig.leadZeroDateTime\"\n               [type]=\"model.inputType\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/>\n    </ng-template>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n    </datalist>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,