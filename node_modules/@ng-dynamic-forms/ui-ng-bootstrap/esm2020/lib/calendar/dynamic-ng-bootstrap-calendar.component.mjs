import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from "@angular/core";
import { NgbDatepicker } from "@ng-bootstrap/ng-bootstrap";
import { DynamicFormControlComponent } from "@ng-dynamic-forms/core";
import * as i0 from "@angular/core";
import * as i1 from "@ng-dynamic-forms/core";
import * as i2 from "@ng-bootstrap/ng-bootstrap";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class DynamicNGBootstrapCalendarComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCalendarComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i2.NgbDatepickerConfig }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapCalendarComponent, selector: "dynamic-ng-bootstrap-calendar", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, viewQueries: [{ propertyName: "ngbCalendar", first: true, predicate: NgbDatepicker, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [weekdays]=\"model.getAdditional('showWeekdays', config['weekdays'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i2.NgbDatepicker, selector: "ngb-datepicker", inputs: ["dayTemplate", "dayTemplateData", "displayMonths", "firstDayOfWeek", "footerTemplate", "markDisabled", "maxDate", "minDate", "navigation", "outsideDays", "showWeekNumbers", "startDate", "weekdays"], outputs: ["navigate", "dateSelect"], exportAs: ["ngbDatepicker"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-calendar", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [weekdays]=\"model.getAdditional('showWeekdays', config['weekdays'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i2.NgbDatepickerConfig }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbCalendar: [{
                type: ViewChild,
                args: [NgbDatepicker, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1uZy1ib290c3RyYXAtY2FsZW5kYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1mb3Jtcy91aS1uZy1ib290c3RyYXAvc3JjL2xpYi9jYWxlbmRhci9keW5hbWljLW5nLWJvb3RzdHJhcC1jYWxlbmRhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL3VpLW5nLWJvb3RzdHJhcC9zcmMvbGliL2NhbGVuZGFyL2R5bmFtaWMtbmctYm9vdHN0cmFwLWNhbGVuZGFyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNHLE9BQU8sRUFBRSxhQUFhLEVBQXVCLE1BQU0sNEJBQTRCLENBQUM7QUFDaEYsT0FBTyxFQUVILDJCQUEyQixFQUs5QixNQUFNLHdCQUF3QixDQUFDOzs7Ozs7QUFPaEMsTUFBTSxPQUFPLG1DQUFvQyxTQUFRLDJCQUEyQjtJQVloRixZQUFzQixhQUF1QyxFQUN2QyxpQkFBK0MsRUFDbEQsTUFBMkI7UUFDMUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBSHRCLGtCQUFhLEdBQWIsYUFBYSxDQUEwQjtRQUN2QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQThCO1FBQ2xELFdBQU0sR0FBTixNQUFNLENBQXFCO1FBUnBDLFNBQUksR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0MsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBUXhELENBQUM7O2dJQWhCUSxtQ0FBbUM7b0hBQW5DLG1DQUFtQyx1UUFVakMsYUFBYSxxRkMzQjVCLG1nQ0FpQkE7MkZEQWEsbUNBQW1DO2tCQUwvQyxTQUFTOytCQUNJLCtCQUErQixtQkFFeEIsdUJBQXVCLENBQUMsTUFBTTs0TEFHdEMsVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFFSSxJQUFJO3NCQUFiLE1BQU07Z0JBQ0csTUFBTTtzQkFBZixNQUFNO2dCQUNHLEtBQUs7c0JBQWQsTUFBTTtnQkFFbUMsV0FBVztzQkFBcEQsU0FBUzt1QkFBQyxhQUFhLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgVW50eXBlZEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgTmdiRGF0ZXBpY2tlciwgTmdiRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gXCJAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcFwiO1xuaW1wb3J0IHtcbiAgICBEeW5hbWljRGF0ZVBpY2tlck1vZGVsLFxuICAgIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgIER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2Vcbn0gZnJvbSBcIkBuZy1keW5hbWljLWZvcm1zL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiZHluYW1pYy1uZy1ib290c3RyYXAtY2FsZW5kYXJcIixcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2R5bmFtaWMtbmctYm9vdHN0cmFwLWNhbGVuZGFyLmNvbXBvbmVudC5odG1sXCIsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY05HQm9vdHN0cmFwQ2FsZW5kYXJDb21wb25lbnQgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnQge1xuICAgIEBJbnB1dCgpIGZvcm1MYXlvdXQ/OiBEeW5hbWljRm9ybUxheW91dDtcbiAgICBASW5wdXQoKSBncm91cCE6IFVudHlwZWRGb3JtR3JvdXA7XG4gICAgQElucHV0KCkgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0O1xuICAgIEBJbnB1dCgpIG1vZGVsITogRHluYW1pY0RhdGVQaWNrZXJNb2RlbDtcblxuICAgIEBPdXRwdXQoKSBibHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgZm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQFZpZXdDaGlsZChOZ2JEYXRlcGlja2VyLCB7c3RhdGljOiB0cnVlfSkgbmdiQ2FsZW5kYXIhOiBOZ2JEYXRlcGlja2VyO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGxheW91dFNlcnZpY2U6IER5bmFtaWNGb3JtTGF5b3V0U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdmFsaWRhdGlvblNlcnZpY2U6IER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIGNvbmZpZzogTmdiRGF0ZXBpY2tlckNvbmZpZykge1xuICAgICAgICBzdXBlcihsYXlvdXRTZXJ2aWNlLCB2YWxpZGF0aW9uU2VydmljZSk7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciBbZm9ybUdyb3VwXT1cImdyb3VwXCI+XG5cbiAgICA8bmdiLWRhdGVwaWNrZXIgW2Rpc3BsYXlNb250aHNdPVwibW9kZWwuZ2V0QWRkaXRpb25hbCgnZGlzcGxheU1vbnRocycsIGNvbmZpZ1snZGlzcGxheU1vbnRocyddKVwiXG4gICAgICAgICAgICAgICAgICAgIFtmaXJzdERheU9mV2Vla109XCJtb2RlbC5nZXRBZGRpdGlvbmFsKCdmaXJzdERheU9mV2VlaycsIGNvbmZpZ1snZmlyc3REYXlPZldlZWsnXSlcIlxuICAgICAgICAgICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cIm1vZGVsLmlkXCJcbiAgICAgICAgICAgICAgICAgICAgW2lkXT1cImlkXCJcbiAgICAgICAgICAgICAgICAgICAgW21heERhdGVdPVwibW9kZWwubWF4XCJcbiAgICAgICAgICAgICAgICAgICAgW21pbkRhdGVdPVwibW9kZWwubWluXCJcbiAgICAgICAgICAgICAgICAgICAgW25hdmlnYXRpb25dPVwibW9kZWwuZ2V0QWRkaXRpb25hbCgnbmF2aWdhdGlvbicsIGNvbmZpZ1snbmF2aWdhdGlvbiddKVwiXG4gICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImdldENsYXNzKCdlbGVtZW50JywgJ2NvbnRyb2wnKVwiXG4gICAgICAgICAgICAgICAgICAgIFtvdXRzaWRlRGF5c109XCJtb2RlbC5nZXRBZGRpdGlvbmFsKCdvdXRzaWRlRGF5cycsIGNvbmZpZ1snb3V0c2lkZURheXMnXSlcIlxuICAgICAgICAgICAgICAgICAgICBbc2hvd1dlZWtOdW1iZXJzXT1cIm1vZGVsLmdldEFkZGl0aW9uYWwoJ3Nob3dXZWVrTnVtYmVycycsIGNvbmZpZ1snc2hvd1dlZWtOdW1iZXJzJ10pXCJcbiAgICAgICAgICAgICAgICAgICAgW3dlZWtkYXlzXT1cIm1vZGVsLmdldEFkZGl0aW9uYWwoJ3Nob3dXZWVrZGF5cycsIGNvbmZpZ1snd2Vla2RheXMnXSlcIlxuICAgICAgICAgICAgICAgICAgICBbc3RhcnREYXRlXT1cIm1vZGVsLmZvY3VzZWREYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgKHNlbGVjdCk9XCJvbkNoYW5nZSgkZXZlbnQpXCI+PC9uZ2ItZGF0ZXBpY2tlcj5cblxuPC9uZy1jb250YWluZXI+XG4iXX0=