import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, ViewContainerRef, ContentChildren, HostBinding, ViewChildren, NgModule } from '@angular/core';
import * as i2 from '@ng-bootstrap/ng-bootstrap';
import { NgbDatepicker, NgbRating, NgbTimepicker, NgbButtonsModule, NgbDatepickerModule, NgbRatingModule, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1 from '@ng-dynamic-forms/core';
import { DynamicFormControlComponent, DynamicFormControlContainerComponent, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_RATING, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayComponent, DynamicFormGroupComponent, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import * as i4 from 'ngx-mask';
import { NgxMaskModule } from 'ngx-mask';

class DynamicNGBootstrapCalendarComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCalendarComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i2.NgbDatepickerConfig }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapCalendarComponent, selector: "dynamic-ng-bootstrap-calendar", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, viewQueries: [{ propertyName: "ngbCalendar", first: true, predicate: NgbDatepicker, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [weekdays]=\"model.getAdditional('showWeekdays', config['weekdays'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i2.NgbDatepicker, selector: "ngb-datepicker", inputs: ["dayTemplate", "dayTemplateData", "displayMonths", "firstDayOfWeek", "footerTemplate", "markDisabled", "maxDate", "minDate", "navigation", "outsideDays", "showWeekNumbers", "startDate", "weekdays"], outputs: ["navigate", "dateSelect"], exportAs: ["ngbDatepicker"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-calendar", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [weekdays]=\"model.getAdditional('showWeekdays', config['weekdays'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i2.NgbDatepickerConfig }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbCalendar: [{
                type: ViewChild,
                args: [NgbDatepicker, { static: true }]
            }] } });

class DynamicNGBootstrapCheckboxComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCheckboxComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapCheckboxComponent, selector: "dynamic-ng-bootstrap-checkbox", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<div [formGroup]=\"group\" class=\"form-check\" [class.disabled]=\"model.disabled\">\n\n    <label class=\"form-check-label\">\n\n        <input type=\"checkbox\" class=\"form-check-input\"\n               [checked]=\"model.checked\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [indeterminate]=\"model.indeterminate\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [required]=\"model.required\"\n               [tabindex]=\"model.tabIndex\"\n               [value]=\"model.value\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/><span [innerHTML]=\"model.label\"\n                                                [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></span>\n    </label>\n\n</div>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.CheckboxRequiredValidator, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-checkbox", changeDetection: ChangeDetectionStrategy.Default, template: "<div [formGroup]=\"group\" class=\"form-check\" [class.disabled]=\"model.disabled\">\n\n    <label class=\"form-check-label\">\n\n        <input type=\"checkbox\" class=\"form-check-input\"\n               [checked]=\"model.checked\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [indeterminate]=\"model.indeterminate\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [required]=\"model.required\"\n               [tabindex]=\"model.tabIndex\"\n               [value]=\"model.value\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/><span [innerHTML]=\"model.label\"\n                                                [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></span>\n    </label>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapCheckboxGroupComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
    getCheckboxId(model) {
        return this.layoutService.getElementId(model);
    }
    onCheckboxChange($event, model) {
        this.onChange($event);
        model.value = $event.target.checked;
    }
}
DynamicNGBootstrapCheckboxGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCheckboxGroupComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapCheckboxGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapCheckboxGroupComponent, selector: "dynamic-ng-bootstrap-checkbox-group", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"\n         [formGroupName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n        <label *ngFor=\"let checkboxModel of model.group\" ngbButtonLabel\n               [hidden]=\"checkboxModel.hidden\"\n               [ngClass]=\"getClass('element', 'control', checkboxModel)\">\n\n            <input type=\"checkbox\" ngbButton\n                   [checked]=\"checkboxModel.checked\"\n                   [formControlName]=\"checkboxModel.id\"\n                   [id]=\"getCheckboxId(checkboxModel)\"\n                   [name]=\"checkboxModel.name\"\n                   [required]=\"checkboxModel.required\"\n                   [tabindex]=\"checkboxModel.tabIndex\"\n                   [value]=\"checkboxModel.value\"\n                   (blur)=\"onBlur($event)\"\n                   (change)=\"onCheckboxChange($event, checkboxModel)\"\n                   (focus)=\"onFocus($event)\"/><span [ngClass]=\"getClass('element', 'label', checkboxModel)\"\n                                                    [innerHTML]=\"checkboxModel.label\"></span></label>\n    </div>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.CheckboxRequiredValidator, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.NgbButtonLabel, selector: "[ngbButtonLabel]" }, { kind: "directive", type: i2.NgbCheckBox, selector: "[ngbButton][type=checkbox]", inputs: ["disabled", "valueChecked", "valueUnChecked"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapCheckboxGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-checkbox-group", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [formGroup]=\"group\">\n\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"\n         [formGroupName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n        <label *ngFor=\"let checkboxModel of model.group\" ngbButtonLabel\n               [hidden]=\"checkboxModel.hidden\"\n               [ngClass]=\"getClass('element', 'control', checkboxModel)\">\n\n            <input type=\"checkbox\" ngbButton\n                   [checked]=\"checkboxModel.checked\"\n                   [formControlName]=\"checkboxModel.id\"\n                   [id]=\"getCheckboxId(checkboxModel)\"\n                   [name]=\"checkboxModel.name\"\n                   [required]=\"checkboxModel.required\"\n                   [tabindex]=\"checkboxModel.tabIndex\"\n                   [value]=\"checkboxModel.value\"\n                   (blur)=\"onBlur($event)\"\n                   (change)=\"onCheckboxChange($event, checkboxModel)\"\n                   (focus)=\"onFocus($event)\"/><span [ngClass]=\"getClass('element', 'label', checkboxModel)\"\n                                                    [innerHTML]=\"checkboxModel.label\"></span></label>\n    </div>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapDatePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapDatePickerComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i2.NgbDatepickerConfig }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapDatePickerComponent, selector: "dynamic-ng-bootstrap-datepicker", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, viewQueries: [{ propertyName: "ngbDatePicker", first: true, predicate: NgbDatepicker, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           [weekdays]=\"model.getAdditional('weekdays', config['weekdays'])\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.NgbInputDatepicker, selector: "input[ngbDatepicker]", inputs: ["autoClose", "datepickerClass", "dayTemplate", "dayTemplateData", "displayMonths", "firstDayOfWeek", "footerTemplate", "markDisabled", "minDate", "maxDate", "navigation", "outsideDays", "placement", "restoreFocus", "showWeekNumbers", "startDate", "container", "positionTarget", "weekdays", "disabled"], outputs: ["dateSelect", "navigate", "closed"], exportAs: ["ngbDatepicker"] }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapDatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-datepicker", changeDetection: ChangeDetectionStrategy.Default, template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           [weekdays]=\"model.getAdditional('weekdays', config['weekdays'])\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i2.NgbDatepickerConfig }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], customEvent: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbDatePicker: [{
                type: ViewChild,
                args: [NgbDatepicker]
            }] } });

class DynamicNGBootstrapInputComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapInputComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapInputComponent, selector: "dynamic-ng-bootstrap-input", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input *ngIf=\"model.inputType === 'file'; else maskedInput\" class=\"form-control-file\"\n           [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <ng-template #maskedInput>\n        <input class=\"form-control\"\n               [attr.accept]=\"model.accept\"\n               [attr.max]=\"model.max\"\n               [attr.min]=\"model.min\"\n               [attr.multiple]=\"model.multiple\"\n               [attr.step]=\"model.step\"\n               [autocomplete]=\"model.autoComplete\"\n               [autofocus]=\"model.autoFocus\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [dynamicList]=\"model.listId\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [maxlength]=\"model.maxLength\"\n               [minlength]=\"model.minLength\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [pattern]=\"model.pattern\"\n               [placeholder]=\"model.placeholder\"\n               [readonly]=\"model.readOnly\"\n               [required]=\"model.required\"\n               [spellcheck]=\"model.spellCheck\"\n               [tabindex]=\"model.tabIndex\"\n               [mask]=\"model.mask\"\n               [specialCharacters]=\"model.maskConfig?.specialCharacters\"\n               [patterns]=\"model.maskConfig?.patterns\"\n               [prefix]=\"model.maskConfig?.prefix\"\n               [suffix]=\"model.maskConfig?.suffix\"\n               [thousandSeparator]=\"model.maskConfig?.thousandSeparator\"\n               [decimalMarker]=\"model.maskConfig?.decimalMarker\"\n               [dropSpecialCharacters]=\"model.maskConfig?.dropSpecialCharacters\"\n               [hiddenInput]=\"model.maskConfig?.hiddenInput\"\n               [showMaskTyped]=\"model.maskConfig?.showMaskTyped\"\n               [placeHolderCharacter]=\"model.maskConfig?.placeHolderCharacter\"\n               [shownMaskExpression]=\"model.maskConfig?.shownMaskExpression\"\n               [showTemplate]=\"model.maskConfig?.showTemplate\"\n               [clearIfNotMatch]=\"model.maskConfig.clearIfNotMatch\"\n               [validation]=\"model.maskConfig.validation\"\n               [separatorLimit]=\"model.maskConfig.separatorLimit\"\n               [allowNegativeNumbers]=\"model.maskConfig.allowNegativeNumbers\"\n               [leadZeroDateTime]=\"model.maskConfig.leadZeroDateTime\"\n               [type]=\"model.inputType\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/>\n    </ng-template>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n    </datalist>\n\n</div>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { kind: "directive", type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i4.MaskDirective, selector: "input[mask], textarea[mask]", inputs: ["mask", "specialCharacters", "patterns", "prefix", "suffix", "thousandSeparator", "decimalMarker", "dropSpecialCharacters", "hiddenInput", "showMaskTyped", "placeHolderCharacter", "shownMaskExpression", "showTemplate", "clearIfNotMatch", "validation", "separatorLimit", "allowNegativeNumbers", "leadZeroDateTime", "triggerOnMaskChange"], outputs: ["maskFilled"], exportAs: ["mask", "ngxMask"] }, { kind: "directive", type: i1.DynamicListDirective, selector: "[dynamicList]", inputs: ["dynamicList"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapInputComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-input", changeDetection: ChangeDetectionStrategy.Default, template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input *ngIf=\"model.inputType === 'file'; else maskedInput\" class=\"form-control-file\"\n           [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <ng-template #maskedInput>\n        <input class=\"form-control\"\n               [attr.accept]=\"model.accept\"\n               [attr.max]=\"model.max\"\n               [attr.min]=\"model.min\"\n               [attr.multiple]=\"model.multiple\"\n               [attr.step]=\"model.step\"\n               [autocomplete]=\"model.autoComplete\"\n               [autofocus]=\"model.autoFocus\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [dynamicList]=\"model.listId\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [maxlength]=\"model.maxLength\"\n               [minlength]=\"model.minLength\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [pattern]=\"model.pattern\"\n               [placeholder]=\"model.placeholder\"\n               [readonly]=\"model.readOnly\"\n               [required]=\"model.required\"\n               [spellcheck]=\"model.spellCheck\"\n               [tabindex]=\"model.tabIndex\"\n               [mask]=\"model.mask\"\n               [specialCharacters]=\"model.maskConfig?.specialCharacters\"\n               [patterns]=\"model.maskConfig?.patterns\"\n               [prefix]=\"model.maskConfig?.prefix\"\n               [suffix]=\"model.maskConfig?.suffix\"\n               [thousandSeparator]=\"model.maskConfig?.thousandSeparator\"\n               [decimalMarker]=\"model.maskConfig?.decimalMarker\"\n               [dropSpecialCharacters]=\"model.maskConfig?.dropSpecialCharacters\"\n               [hiddenInput]=\"model.maskConfig?.hiddenInput\"\n               [showMaskTyped]=\"model.maskConfig?.showMaskTyped\"\n               [placeHolderCharacter]=\"model.maskConfig?.placeHolderCharacter\"\n               [shownMaskExpression]=\"model.maskConfig?.shownMaskExpression\"\n               [showTemplate]=\"model.maskConfig?.showTemplate\"\n               [clearIfNotMatch]=\"model.maskConfig.clearIfNotMatch\"\n               [validation]=\"model.maskConfig.validation\"\n               [separatorLimit]=\"model.maskConfig.separatorLimit\"\n               [allowNegativeNumbers]=\"model.maskConfig.allowNegativeNumbers\"\n               [leadZeroDateTime]=\"model.maskConfig.leadZeroDateTime\"\n               [type]=\"model.inputType\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/>\n    </ng-template>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n    </datalist>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapRadioGroupComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapRadioGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapRadioGroupComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapRadioGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapRadioGroupComponent, selector: "dynamic-ng-bootstrap-radio-group", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <div ngbRadioGroup class=\"btn-group btn-group-toggle\" role=\"radiogroup\"\n         [formControlName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\"\n         [tabindex]=\"model.tabIndex\"\n         (change)=\"onChange($event)\">\n\n        <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n        <label *ngFor=\"let option of model.options$ | async\" ngbButtonLabel\n               [ngClass]=\"[getClass('element', 'option'), getClass('grid', 'option')]\">\n\n            <input type=\"radio\" ngbButton\n                   [disabled]=\"option.disabled\"\n                   [name]=\"model.name\"\n                   [value]=\"option.value\"\n                   (blur)=\"onBlur($event)\"\n                   (focus)=\"onFocus($event)\"/><span [innerHTML]=\"option.label\"></span>\n        </label>\n\n    </div>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.NgbButtonLabel, selector: "[ngbButtonLabel]" }, { kind: "directive", type: i2.NgbRadioGroup, selector: "[ngbRadioGroup]", inputs: ["name"] }, { kind: "directive", type: i2.NgbRadio, selector: "[ngbButton][type=radio]", inputs: ["name", "value", "disabled"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapRadioGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-radio-group", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [formGroup]=\"group\">\n\n    <div ngbRadioGroup class=\"btn-group btn-group-toggle\" role=\"radiogroup\"\n         [formControlName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\"\n         [tabindex]=\"model.tabIndex\"\n         (change)=\"onChange($event)\">\n\n        <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n        <label *ngFor=\"let option of model.options$ | async\" ngbButtonLabel\n               [ngClass]=\"[getClass('element', 'option'), getClass('grid', 'option')]\">\n\n            <input type=\"radio\" ngbButton\n                   [disabled]=\"option.disabled\"\n                   [name]=\"model.name\"\n                   [value]=\"option.value\"\n                   (blur)=\"onBlur($event)\"\n                   (focus)=\"onFocus($event)\"/><span [innerHTML]=\"option.label\"></span>\n        </label>\n\n    </div>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapRatingComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapRatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapRatingComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i2.NgbRatingConfig }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapRatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapRatingComponent, selector: "dynamic-ng-bootstrap-rating", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, viewQueries: [{ propertyName: "ngbRating", first: true, predicate: NgbRating, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-rating [formControlName]=\"model.id\"\n                [id]=\"id\"\n                [max]=\"model.max\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [resettable]=\"model.getAdditional('resettable', config['resettable'])\"\n                (hover)=\"onCustomEvent($event, 'hover')\"\n                (leave)=\"onCustomEvent($event, 'leave')\"\n                (rateChange)=\"onChange($event)\"></ngb-rating>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i2.NgbRating, selector: "ngb-rating", inputs: ["max", "rate", "readonly", "resettable", "starTemplate"], outputs: ["hover", "leave", "rateChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapRatingComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-rating", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-rating [formControlName]=\"model.id\"\n                [id]=\"id\"\n                [max]=\"model.max\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [resettable]=\"model.getAdditional('resettable', config['resettable'])\"\n                (hover)=\"onCustomEvent($event, 'hover')\"\n                (leave)=\"onCustomEvent($event, 'leave')\"\n                (rateChange)=\"onChange($event)\"></ngb-rating>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i2.NgbRatingConfig }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], customEvent: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbRating: [{
                type: ViewChild,
                args: [NgbRating, { static: true }]
            }] } });

class DynamicNGBootstrapSelectComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapSelectComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapSelectComponent, selector: "dynamic-ng-bootstrap-select", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <select class=\"form-control\"\n            [class.is-invalid]=\"showErrorMessages\"\n            [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"id\"\n            [name]=\"model.name\"\n            [ngClass]=\"getClass('element', 'control')\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-select", changeDetection: ChangeDetectionStrategy.Default, template: "<ng-container [formGroup]=\"group\">\n\n    <select class=\"form-control\"\n            [class.is-invalid]=\"showErrorMessages\"\n            [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"id\"\n            [name]=\"model.name\"\n            [ngClass]=\"getClass('element', 'control')\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapSwitchComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapSwitchComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapSwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapSwitchComponent, selector: "dynamic-ng-bootstrap-switch", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<div [formGroup]=\"group\" class=\"custom-control custom-switch\">\n\n    <input type=\"checkbox\" class=\"custom-control-input\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [required]=\"model.required\"\n           [tabindex]=\"model.tabIndex\"\n           [value]=\"model.value\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <label class=\"custom-control-label\" [for]=\"id\" [innerHTML]=\"model.label\"></label>\n\n</div>\n\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.CheckboxRequiredValidator, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapSwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-switch", changeDetection: ChangeDetectionStrategy.Default, template: "<div [formGroup]=\"group\" class=\"custom-control custom-switch\">\n\n    <input type=\"checkbox\" class=\"custom-control-input\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [required]=\"model.required\"\n           [tabindex]=\"model.tabIndex\"\n           [value]=\"model.value\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <label class=\"custom-control-label\" [for]=\"id\" [innerHTML]=\"model.label\"></label>\n\n</div>\n\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapTextAreaComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapTextAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapTextAreaComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapTextAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapTextAreaComponent, selector: "dynamic-ng-bootstrap-textarea", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <textarea class=\"form-control\"\n              [class.is-invalid]=\"showErrorMessages\"\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"id\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { kind: "directive", type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapTextAreaComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-textarea", changeDetection: ChangeDetectionStrategy.Default, template: "<ng-container [formGroup]=\"group\">\n\n    <textarea class=\"form-control\"\n              [class.is-invalid]=\"showErrorMessages\"\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"id\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

class DynamicNGBootstrapTimePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapTimePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapTimePickerComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i2.NgbTimepickerConfig }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapTimePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapTimePickerComponent, selector: "dynamic-ng-bootstrap-timepicker", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, viewQueries: [{ propertyName: "ngbTimePicker", first: true, predicate: NgbTimepicker, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-timepicker [id]=\"id\"\n                    [formControlName]=\"model.id\"\n                    [hourStep]=\"model.getAdditional('hourStep', config['hourStep'])\"\n                    [meridian]=\"model.meridian\"\n                    [minuteStep]=\"model.getAdditional('minuteStep', config['minuteStep'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [seconds]=\"model.showSeconds\"\n                    [secondStep]=\"model.getAdditional('secondStep', config['secondStep'])\"\n                    [size]=\"model.getAdditional('size', config['size'])\"\n                    [spinners]=\"model.getAdditional('spinners', config['spinners'])\"></ngb-timepicker>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i2.NgbTimepicker, selector: "ngb-timepicker", inputs: ["meridian", "spinners", "seconds", "hourStep", "minuteStep", "secondStep", "readonlyInputs", "size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapTimePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-timepicker", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-timepicker [id]=\"id\"\n                    [formControlName]=\"model.id\"\n                    [hourStep]=\"model.getAdditional('hourStep', config['hourStep'])\"\n                    [meridian]=\"model.meridian\"\n                    [minuteStep]=\"model.getAdditional('minuteStep', config['minuteStep'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [seconds]=\"model.showSeconds\"\n                    [secondStep]=\"model.getAdditional('secondStep', config['secondStep'])\"\n                    [size]=\"model.getAdditional('size', config['size'])\"\n                    [spinners]=\"model.getAdditional('spinners', config['spinners'])\"></ngb-timepicker>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i2.NgbTimepickerConfig }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbTimePicker: [{
                type: ViewChild,
                args: [NgbTimepicker, { static: true }]
            }] } });

class DynamicNGBootstrapFormControlContainerComponent extends DynamicFormControlContainerComponent {
    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        super(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService);
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this.asBootstrapFormGroup = true;
        this.context = null;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        // tslint:disable-next-line:no-output-rename
        this.customEvent = new EventEmitter();
    }
    get componentType() {
        return this.componentService.getCustomComponentType(this.model) || ngBootstrapUIFormControlMapFn(this.model);
    }
}
DynamicNGBootstrapFormControlContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormControlContainerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ComponentFactoryResolver }, { token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i1.DynamicFormComponentService }, { token: i1.DynamicFormRelationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapFormControlContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapFormControlContainerComponent, selector: "dynamic-ng-bootstrap-form-control", inputs: { asBootstrapFormGroup: "asBootstrapFormGroup", context: "context", group: "group", hostClass: "hostClass", inputTemplateList: ["templates", "inputTemplateList"], layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus", customEvent: "ngbEvent" }, host: { properties: { "class": "this.klass" } }, queries: [{ propertyName: "contentTemplateList", predicate: DynamicTemplateDirective }], viewQueries: [{ propertyName: "componentViewContainerRef", first: true, predicate: ["componentViewContainer"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <div [ngClass]=\"getClass('grid', 'control')\">\n\n        <ng-container #componentViewContainer></ng-container>\n\n        <small *ngIf=\"hasHint\" class=\"text-muted\" [innerHTML]=\"hint\" [ngClass]=\"getClass('element', 'hint')\"></small>\n\n        <div *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n            <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message }}</small>\n        </div>\n\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormControlContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-form-control", changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <div [ngClass]=\"getClass('grid', 'control')\">\n\n        <ng-container #componentViewContainer></ng-container>\n\n        <small *ngIf=\"hasHint\" class=\"text-muted\" [innerHTML]=\"hint\" [ngClass]=\"getClass('element', 'hint')\"></small>\n\n        <div *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n            <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message }}</small>\n        </div>\n\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ComponentFactoryResolver }, { type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i1.DynamicFormComponentService }, { type: i1.DynamicFormRelationService }]; }, propDecorators: { contentTemplateList: [{
                type: ContentChildren,
                args: [DynamicTemplateDirective]
            }], klass: [{
                type: HostBinding,
                args: ["class"]
            }], asBootstrapFormGroup: [{
                type: Input
            }], context: [{
                type: Input
            }], group: [{
                type: Input
            }], hostClass: [{
                type: Input
            }], inputTemplateList: [{
                type: Input,
                args: ["templates"]
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], customEvent: [{
                type: Output,
                args: ["ngbEvent"]
            }], componentViewContainerRef: [{
                type: ViewChild,
                args: ["componentViewContainer", { read: ViewContainerRef, static: true }]
            }] } });
function ngBootstrapUIFormControlMapFn(model) {
    switch (model.type) {
        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
            return DynamicNGBootstrapFormArrayComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
            return DynamicNGBootstrapCheckboxComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            return DynamicNGBootstrapCheckboxGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
            const datePickerModel = model;
            return datePickerModel.inline ? DynamicNGBootstrapCalendarComponent : DynamicNGBootstrapDatePickerComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
            return DynamicNGBootstrapFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
            return DynamicNGBootstrapInputComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
            return DynamicNGBootstrapRadioGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RATING:
            return DynamicNGBootstrapRatingComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
            return DynamicNGBootstrapSelectComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
            return DynamicNGBootstrapSwitchComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
            return DynamicNGBootstrapTextAreaComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
            return DynamicNGBootstrapTimePickerComponent;
        default:
            return null;
    }
}
class DynamicNGBootstrapFormArrayComponent extends DynamicFormArrayComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapFormArrayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormArrayComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapFormArrayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapFormArrayComponent, selector: "dynamic-ng-bootstrap-form-array", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model", templates: "templates" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, viewQueries: [{ propertyName: "components", predicate: DynamicNGBootstrapFormControlContainerComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of groupModel.group\"\n                                               [context]=\"groupModel\"\n                                               [group]=\"array.at(idx)\"\n                                               [hidden]=\"_model.hidden\"\n                                               [layout]=\"formLayout\"\n                                               [model]=\"_model\"\n                                               [templates]=\"templates\"\n                                               [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                               (blur)=\"onBlur($event)\"\n                                               (change)=\"onChange($event)\"\n                                               (focus)=\"onFocus($event)\"\n                                               (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i3.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "component", type: DynamicNGBootstrapFormControlContainerComponent, selector: "dynamic-ng-bootstrap-form-control", inputs: ["asBootstrapFormGroup", "context", "group", "hostClass", "templates", "layout", "model"], outputs: ["blur", "change", "focus", "ngbEvent"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormArrayComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-form-array", template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of groupModel.group\"\n                                               [context]=\"groupModel\"\n                                               [group]=\"array.at(idx)\"\n                                               [hidden]=\"_model.hidden\"\n                                               [layout]=\"formLayout\"\n                                               [model]=\"_model\"\n                                               [templates]=\"templates\"\n                                               [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                               (blur)=\"onBlur($event)\"\n                                               (change)=\"onChange($event)\"\n                                               (focus)=\"onFocus($event)\"\n                                               (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], templates: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], customEvent: [{
                type: Output
            }], focus: [{
                type: Output
            }], components: [{
                type: ViewChildren,
                args: [DynamicNGBootstrapFormControlContainerComponent]
            }] } });
class DynamicNGBootstrapFormGroupComponent extends DynamicFormGroupComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapFormGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormGroupComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapFormGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapFormGroupComponent, selector: "dynamic-ng-bootstrap-form-group", inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model", templates: "templates" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, viewQueries: [{ propertyName: "components", predicate: DynamicNGBootstrapFormControlContainerComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\" [formGroupName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element','control')\">\n\n        <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of model.group\"\n                                           [asBootstrapFormGroup]=\"true\"\n                                           [group]=\"control\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"formLayout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n    </div>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: DynamicNGBootstrapFormControlContainerComponent, selector: "dynamic-ng-bootstrap-form-control", inputs: ["asBootstrapFormGroup", "context", "group", "hostClass", "templates", "layout", "model"], outputs: ["blur", "change", "focus", "ngbEvent"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-form-group", template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\" [formGroupName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element','control')\">\n\n        <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of model.group\"\n                                           [asBootstrapFormGroup]=\"true\"\n                                           [group]=\"control\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"formLayout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n    </div>\n\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{
                type: Input
            }], group: [{
                type: Input
            }], layout: [{
                type: Input
            }], model: [{
                type: Input
            }], templates: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], customEvent: [{
                type: Output
            }], focus: [{
                type: Output
            }], components: [{
                type: ViewChildren,
                args: [DynamicNGBootstrapFormControlContainerComponent]
            }] } });

class DynamicNGBootstrapFormComponent extends DynamicFormComponent {
    constructor(changeDetectorRef, componentService) {
        super(changeDetectorRef, componentService);
        this.changeDetectorRef = changeDetectorRef;
        this.componentService = componentService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ngbEvent = new EventEmitter();
    }
}
DynamicNGBootstrapFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DynamicFormComponentService }], target: i0.ɵɵFactoryTarget.Component });
DynamicNGBootstrapFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: DynamicNGBootstrapFormComponent, selector: "dynamic-ng-bootstrap-form", inputs: { group: "group", model: "model", layout: "layout" }, outputs: { blur: "blur", change: "change", focus: "focus", ngbEvent: "ngbEvent" }, queries: [{ propertyName: "templates", predicate: DynamicTemplateDirective }], viewQueries: [{ propertyName: "components", predicate: DynamicNGBootstrapFormControlContainerComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<dynamic-ng-bootstrap-form-control *ngFor=\"let controlModel of model; trackBy: trackByFn\"\n                                   [group]=\"group\"\n                                   [hidden]=\"controlModel.hidden\"\n                                   [layout]=\"layout\"\n                                   [model]=\"controlModel\"\n                                   [templates]=\"templates\"\n                                   (blur)=\"onBlur($event)\"\n                                   (change)=\"onChange($event)\"\n                                   (focus)=\"onFocus($event)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></dynamic-ng-bootstrap-form-control>\n", dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: DynamicNGBootstrapFormControlContainerComponent, selector: "dynamic-ng-bootstrap-form-control", inputs: ["asBootstrapFormGroup", "context", "group", "hostClass", "templates", "layout", "model"], outputs: ["blur", "change", "focus", "ngbEvent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicNGBootstrapFormComponent, decorators: [{
            type: Component,
            args: [{ selector: "dynamic-ng-bootstrap-form", changeDetection: ChangeDetectionStrategy.OnPush, template: "<dynamic-ng-bootstrap-form-control *ngFor=\"let controlModel of model; trackBy: trackByFn\"\n                                   [group]=\"group\"\n                                   [hidden]=\"controlModel.hidden\"\n                                   [layout]=\"layout\"\n                                   [model]=\"controlModel\"\n                                   [templates]=\"templates\"\n                                   (blur)=\"onBlur($event)\"\n                                   (change)=\"onChange($event)\"\n                                   (focus)=\"onFocus($event)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></dynamic-ng-bootstrap-form-control>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DynamicFormComponentService }]; }, propDecorators: { group: [{
                type: Input
            }], model: [{
                type: Input
            }], layout: [{
                type: Input
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ngbEvent: [{
                type: Output
            }], templates: [{
                type: ContentChildren,
                args: [DynamicTemplateDirective]
            }], components: [{
                type: ViewChildren,
                args: [DynamicNGBootstrapFormControlContainerComponent]
            }] } });

class DynamicFormsNGBootstrapUIModule {
}
DynamicFormsNGBootstrapUIModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsNGBootstrapUIModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DynamicFormsNGBootstrapUIModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsNGBootstrapUIModule, declarations: [DynamicNGBootstrapCalendarComponent,
        DynamicNGBootstrapCheckboxComponent,
        DynamicNGBootstrapCheckboxGroupComponent,
        DynamicNGBootstrapDatePickerComponent,
        DynamicNGBootstrapFormArrayComponent,
        DynamicNGBootstrapFormComponent,
        DynamicNGBootstrapFormControlContainerComponent,
        DynamicNGBootstrapFormGroupComponent,
        DynamicNGBootstrapInputComponent,
        DynamicNGBootstrapRadioGroupComponent,
        DynamicNGBootstrapRatingComponent,
        DynamicNGBootstrapSelectComponent,
        DynamicNGBootstrapSwitchComponent,
        DynamicNGBootstrapTextAreaComponent,
        DynamicNGBootstrapTimePickerComponent], imports: [CommonModule,
        ReactiveFormsModule,
        NgbButtonsModule,
        NgbDatepickerModule,
        NgbRatingModule,
        NgbTimepickerModule,
        NgxMaskModule,
        DynamicFormsCoreModule], exports: [DynamicFormsCoreModule,
        DynamicNGBootstrapCalendarComponent,
        DynamicNGBootstrapCheckboxComponent,
        DynamicNGBootstrapCheckboxGroupComponent,
        DynamicNGBootstrapDatePickerComponent,
        DynamicNGBootstrapFormArrayComponent,
        DynamicNGBootstrapFormComponent,
        DynamicNGBootstrapFormControlContainerComponent,
        DynamicNGBootstrapFormGroupComponent,
        DynamicNGBootstrapInputComponent,
        DynamicNGBootstrapRadioGroupComponent,
        DynamicNGBootstrapRatingComponent,
        DynamicNGBootstrapSelectComponent,
        DynamicNGBootstrapSwitchComponent,
        DynamicNGBootstrapTextAreaComponent,
        DynamicNGBootstrapTimePickerComponent] });
DynamicFormsNGBootstrapUIModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsNGBootstrapUIModule, imports: [CommonModule,
        ReactiveFormsModule,
        NgbButtonsModule,
        NgbDatepickerModule,
        NgbRatingModule,
        NgbTimepickerModule,
        NgxMaskModule,
        DynamicFormsCoreModule, DynamicFormsCoreModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsNGBootstrapUIModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        NgbButtonsModule,
                        NgbDatepickerModule,
                        NgbRatingModule,
                        NgbTimepickerModule,
                        NgxMaskModule,
                        DynamicFormsCoreModule
                    ],
                    declarations: [
                        DynamicNGBootstrapCalendarComponent,
                        DynamicNGBootstrapCheckboxComponent,
                        DynamicNGBootstrapCheckboxGroupComponent,
                        DynamicNGBootstrapDatePickerComponent,
                        DynamicNGBootstrapFormArrayComponent,
                        DynamicNGBootstrapFormComponent,
                        DynamicNGBootstrapFormControlContainerComponent,
                        DynamicNGBootstrapFormGroupComponent,
                        DynamicNGBootstrapInputComponent,
                        DynamicNGBootstrapRadioGroupComponent,
                        DynamicNGBootstrapRatingComponent,
                        DynamicNGBootstrapSelectComponent,
                        DynamicNGBootstrapSwitchComponent,
                        DynamicNGBootstrapTextAreaComponent,
                        DynamicNGBootstrapTimePickerComponent
                    ],
                    exports: [
                        DynamicFormsCoreModule,
                        DynamicNGBootstrapCalendarComponent,
                        DynamicNGBootstrapCheckboxComponent,
                        DynamicNGBootstrapCheckboxGroupComponent,
                        DynamicNGBootstrapDatePickerComponent,
                        DynamicNGBootstrapFormArrayComponent,
                        DynamicNGBootstrapFormComponent,
                        DynamicNGBootstrapFormControlContainerComponent,
                        DynamicNGBootstrapFormGroupComponent,
                        DynamicNGBootstrapInputComponent,
                        DynamicNGBootstrapRadioGroupComponent,
                        DynamicNGBootstrapRatingComponent,
                        DynamicNGBootstrapSelectComponent,
                        DynamicNGBootstrapSwitchComponent,
                        DynamicNGBootstrapTextAreaComponent,
                        DynamicNGBootstrapTimePickerComponent
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DynamicFormsNGBootstrapUIModule, DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent, ngBootstrapUIFormControlMapFn };
//# sourceMappingURL=ui-ng-bootstrap.mjs.map
//# sourceMappingURL=ui-ng-bootstrap.mjs.map
