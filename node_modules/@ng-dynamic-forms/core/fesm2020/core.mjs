import * as i0 from '@angular/core';
import { QueryList, InjectionToken, Injectable, Inject, Optional, Directive, Input, NgModule } from '@angular/core';
import { __decorate } from 'tslib';
import { BehaviorSubject, isObservable, of, merge } from 'rxjs';
import 'reflect-metadata';
import { tap, map, startWith, distinctUntilChanged, bufferCount, filter } from 'rxjs/operators';
import { initialConfig } from 'ngx-mask';
import { Validators, NG_VALIDATORS, NG_ASYNC_VALIDATORS, UntypedFormArray, UntypedFormControl, UntypedFormGroup, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

function isBoolean(value) {
    return typeof value === "boolean";
}
// tslint:disable-next-line:ban-types
function isFunction(value) {
    return typeof value === "function";
}
function isNumber(value) {
    return typeof value === "number";
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isString(value) {
    return typeof value === "string";
}

class DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        this.layoutService = layoutService;
        this.validationService = validationService;
        this._hasFocus = false;
    }
    get control() {
        const control = this.group.get(this.model.id);
        if (control === null) {
            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);
        }
        return control;
    }
    get id() {
        return this.layoutService.getElementId(this.model);
    }
    get hasFocus() {
        return this._hasFocus;
    }
    get isInvalid() {
        return this.control.invalid;
    }
    get isValid() {
        return this.control.valid;
    }
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    get showErrorMessages() {
        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);
    }
    getClass(context, place, model = this.model) {
        const controlLayout = model === this.model ? this.layout :
            this.layoutService.findByModel(model, this.formLayout) ?? model.layout;
        return this.layoutService.getClass(controlLayout, context, place);
    }
    onBlur($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = false;
        this.blur.emit($event);
    }
    onChange($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this.change.emit($event);
    }
    onCustomEvent($event, type = null, bypass = false) {
        if (bypass) {
            this.customEvent?.emit($event);
        }
        else if (isString(type)) {
            this.customEvent?.emit({ customEvent: $event, customEventType: type });
        }
    }
    onFocus($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = true;
        this.focus.emit($event);
    }
}

class DynamicFormArrayComponent extends DynamicFormControlComponent {
    get array() {
        return this.control;
    }
    get startTemplate() {
        return this.layoutService.getStartTemplate(this.model, this.templates);
    }
    get endTemplate() {
        return this.layoutService.getEndTemplate(this.model, this.templates);
    }
    markForCheck() {
        if (this.components instanceof QueryList) {
            this.components.forEach(component => component.markForCheck());
        }
    }
}

class DynamicFormGroupComponent extends DynamicFormControlComponent {
    markForCheck() {
        if (this.components instanceof QueryList) {
            this.components.forEach(component => component.markForCheck());
        }
    }
}

const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken("DYNAMIC_FORM_CONTROL_MAP_FN");
class DynamicFormComponentService {
    constructor(DYNAMIC_FORM_CONTROL_MAP_FN) {
        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
        this.forms = [];
        this.formControls = {};
        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
    }
    getForms() {
        return this.forms.values();
    }
    registerForm(component) {
        this.forms.push(component);
    }
    unregisterForm(component) {
        const indexOf = this.forms.indexOf(component);
        if (indexOf !== -1) {
            this.forms.splice(indexOf, 1);
        }
    }
    getFormControlRef(modelId, index) {
        const ref = this.formControls[modelId];
        if (isNumber(index)) {
            return Array.isArray(ref) ? ref[index] : undefined;
        }
        else {
            return ref;
        }
    }
    registerFormControl(model, ref, index) {
        if (isNumber(index)) { // threat model as array child
            const arrayRef = this.formControls[model.id] || [];
            if (Array.isArray(arrayRef)) {
                arrayRef.splice(index, 0, ref);
                this.formControls[model.id] = arrayRef;
            }
            else {
                console.warn(`registerFormControlRef is called with index for a non-array form control: ${model.id}`);
            }
        }
        else {
            this.formControls[model.id] = ref;
        }
    }
    unregisterFormControl(modelId, index) {
        const componentRef = this.formControls[modelId];
        if (isNumber(index)) {
            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {
                componentRef.splice(index, 1);
            }
        }
        else if (componentRef !== undefined) {
            delete this.formControls[modelId];
        }
    }
    getCustomComponentType(model) {
        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;
    }
}
DynamicFormComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponentService, deps: [{ token: DYNAMIC_FORM_CONTROL_MAP_FN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicFormComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponentService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DYNAMIC_FORM_CONTROL_MAP_FN]
                }, {
                    type: Optional
                }] }]; } });

// tslint:disable-next-line:directive-class-suffix
class DynamicFormComponent {
    constructor(changeDetectorRef, componentService) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentService = componentService;
    }
    ngOnInit() {
        this.componentService.registerForm(this);
    }
    ngOnDestroy() {
        this.componentService.unregisterForm(this);
    }
    trackByFn(_index, model) {
        return model.id;
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
        if (this.components instanceof QueryList) {
            this.components.forEach(component => component.markForCheck());
        }
    }
    detectChanges() {
        this.changeDetectorRef.detectChanges();
    }
    onBlur($event) {
        this.blur?.emit($event);
    }
    onChange($event) {
        this.change?.emit($event);
    }
    onFocus($event) {
        this.focus?.emit($event);
    }
    onCustomEvent($event, customEventEmitter) {
        customEventEmitter.emit($event);
    }
}
DynamicFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DynamicFormComponentService }], target: i0.ɵɵFactoryTarget.Directive });
DynamicFormComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: DynamicFormComponent, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: DynamicFormComponentService }]; } });

var DynamicFormControlEventType;
(function (DynamicFormControlEventType) {
    DynamicFormControlEventType["Blur"] = "blur";
    DynamicFormControlEventType["Change"] = "change";
    DynamicFormControlEventType["Focus"] = "focus";
})(DynamicFormControlEventType || (DynamicFormControlEventType = {}));
function isDynamicFormControlEvent($event) {
    return isObject($event) && $event.hasOwnProperty("$event");
}

const METADATA_KEY_SERIALIZABLE = "SERIALIZABLE";
function serializable(name) {
    return (target, key) => {
        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, { key, name: name || key }, target, key);
    };
}
function getSerializables(target) {
    const serializables = [];
    // tslint:disable-next-line:forin
    for (const key in target) {
        const metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);
        if (metadata) {
            serializables.push(metadata);
        }
    }
    return serializables;
}
function serialize(target, prototype) {
    return getSerializables(prototype || target).reduce((prev, prop) => {
        prev[prop.name] = target[prop.key];
        return prev;
    }, {});
}

class DynamicFormControlModel {
    constructor(config, layout = null) {
        this.parent = null;
        this.asyncValidators = config.asyncValidators ?? null;
        this.errorMessages = config.errorMessages ?? null;
        this.hidden = isBoolean(config.hidden) ? config.hidden : false;
        this.id = config.id;
        this.label = config.label ?? null;
        this.labelTooltip = config.labelTooltip ?? null;
        this.controlTooltip = config.controlTooltip ?? null;
        this.layout = layout;
        this.name = config.name ?? config.id;
        this.relations = Array.isArray(config.relations) ? config.relations : [];
        this.updateOn = isString(config.updateOn) ? config.updateOn : null;
        this.validators = config.validators ?? null;
        this._disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.disabled$ = new BehaviorSubject(this._disabled);
        this.disabled$.subscribe(disabled => this._disabled = disabled);
        this.disabledChanges = this.disabled$.asObservable();
    }
    get disabled() {
        return this.disabled$.getValue();
    }
    set disabled(disabled) {
        this.disabled$.next(disabled);
    }
    get hasErrorMessages() {
        return isObject(this.errorMessages);
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "asyncValidators", void 0);
__decorate([
    serializable("disabled")
], DynamicFormControlModel.prototype, "_disabled", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "errorMessages", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "hidden", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "id", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "label", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "labelTooltip", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "controlTooltip", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "layout", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "name", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "relations", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "updateOn", void 0);
__decorate([
    serializable()
], DynamicFormControlModel.prototype, "validators", void 0);

class DynamicFormValueControlModel extends DynamicFormControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.additional = isObject(config.additional) ? config.additional : null;
        this.hint = config.hint ?? null;
        this.required = isBoolean(config.required) ? config.required : false;
        this.tabIndex = config.tabIndex ?? null;
        this._value = config.value ?? null;
        this.value$ = new BehaviorSubject(this._value);
        this.value$.subscribe(value => this._value = value);
        this.valueChanges = this.value$.asObservable();
    }
    get value() {
        return this.value$.getValue();
    }
    set value(value) {
        this.value$.next(value);
    }
    getAdditional(key, defaultValue) {
        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;
    }
}
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "additional", void 0);
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "hint", void 0);
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "required", void 0);
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "tabIndex", void 0);
__decorate([
    serializable("value")
], DynamicFormValueControlModel.prototype, "_value", void 0);

class DynamicFormArrayGroupModel {
    constructor(context, group = [], index = -1) {
        this.$implicit = this;
        this.context = context;
        this.group = group;
        this.index = index;
    }
    get parent() {
        return this.context;
    }
    get(index) {
        return this.group[index];
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable()
], DynamicFormArrayGroupModel.prototype, "group", void 0);
__decorate([
    serializable()
], DynamicFormArrayGroupModel.prototype, "index", void 0);
const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = "ARRAY";
class DynamicFormArrayModel extends DynamicFormControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.groups = [];
        this.type = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
        if (isFunction(config.groupFactory)) {
            this.groupFactory = config.groupFactory;
        }
        else {
            throw new Error("group factory function must be specified for DynamicFormArrayModel");
        }
        this.groupAsyncValidators = config.groupAsyncValidators ?? null;
        this.groupPrototype = this.groupFactory();
        this.groupValidators = config.groupValidators ?? null;
        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;
        if (Array.isArray(config.groups)) {
            config.groups.forEach((arrayGroup, index) => {
                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index ?? index));
            });
        }
        else {
            for (let index = 0; index < this.initialCount; index++) {
                this.addGroup();
            }
        }
    }
    updateGroupIndex() {
        this.groups.forEach((group, index) => group.index = index);
    }
    get size() {
        return this.groups.length;
    }
    get(index) {
        return this.groups[index];
    }
    addGroup() {
        return this.insertGroup(this.groups.length);
    }
    insertGroup(index) {
        const group = new DynamicFormArrayGroupModel(this, this.groupFactory());
        this.groups.splice(index, 0, group);
        this.updateGroupIndex();
        return group;
    }
    moveGroup(index, step) {
        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));
        this.updateGroupIndex();
    }
    removeGroup(index) {
        this.groups.splice(index, 1);
        this.updateGroupIndex();
    }
    clear() {
        this.groups.splice(0);
        this.updateGroupIndex();
    }
}
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groupAsyncValidators", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groupValidators", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groups", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "initialCount", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groupPrototype", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "type", void 0);

class DynamicCheckControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.labelPosition = config.labelPosition ?? null;
        this.checked = isBoolean(this.value) ? this.value : false;
    }
    get checked() {
        return this.value ?? false;
    }
    set checked(checked) {
        this.value = checked;
    }
    toggle() {
        this.checked = !this.checked;
    }
}
__decorate([
    serializable()
], DynamicCheckControlModel.prototype, "labelPosition", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = "CHECKBOX";
class DynamicCheckboxModel extends DynamicCheckControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
        this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;
    }
}
__decorate([
    serializable()
], DynamicCheckboxModel.prototype, "indeterminate", void 0);
__decorate([
    serializable()
], DynamicCheckboxModel.prototype, "type", void 0);

class DynamicInputControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.autoComplete = config.autoComplete ?? "on";
        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;
        this.minLength = isNumber(config.minLength) ? config.minLength : null;
        this.placeholder = config.placeholder ?? "";
        this.prefix = config.prefix ?? null;
        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;
        this.suffix = config.suffix ?? null;
    }
}
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "autoComplete", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "autoFocus", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "maxLength", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "minLength", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "placeholder", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "prefix", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "readOnly", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "spellCheck", void 0);
__decorate([
    serializable()
], DynamicInputControlModel.prototype, "suffix", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
// export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
class DynamicInputModel extends DynamicInputControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.files = null;
        this.list$ = null;
        this._list = null;
        this._listId = null;
        this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
        this.accept = config.accept ?? null;
        this.inputType = config.inputType ?? DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
        this.mask = config.mask ?? "";
        this.maskConfig = config.maskConfig ? { ...initialConfig, ...config.maskConfig } : initialConfig;
        this.max = config.max !== undefined ? config.max : null;
        this.min = config.min !== undefined ? config.min : null;
        this.multiple = isBoolean(config.multiple) ? config.multiple : null;
        this.pattern = config.pattern ?? null;
        this.step = isNumber(config.step) ? config.step : null;
        if (config.list !== undefined) {
            this.list = config.list;
            this._listId = `${this.id}List`;
        }
    }
    get listId() {
        return this._listId;
    }
    get hasList() {
        return isObservable(this.list$);
    }
    set list(list) {
        if (Array.isArray(list)) {
            this._list = list;
            this.list$ = of(this._list);
        }
        else if (isObservable(list)) {
            this.list$ = list.pipe(tap(_list => this._list = _list));
        }
        else {
            this._list = null;
            this.list$ = null;
        }
    }
}
__decorate([
    serializable()
], DynamicInputModel.prototype, "accept", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "inputType", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "mask", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "maskConfig", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "max", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "min", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "multiple", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "pattern", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "step", void 0);
__decorate([
    serializable("list")
], DynamicInputModel.prototype, "_list", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "type", void 0);

var DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT;
(function (DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT) {
    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT["Start"] = "START";
    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT["End"] = "END";
})(DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT || (DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT = {}));
class DynamicTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
        this.align = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;
        this.as = null;
    }
}
DynamicTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
DynamicTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: DynamicTemplateDirective, selector: "ng-template[modelId],ng-template[modelType]", inputs: { align: "align", as: "as", index: "index", modelId: "modelId", modelType: "modelType" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "ng-template[modelId],ng-template[modelType]"
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { align: [{
                type: Input
            }], as: [{
                type: Input
            }], index: [{
                type: Input
            }], modelId: [{
                type: Input
            }], modelType: [{
                type: Input
            }] } });

class DynamicFormLayoutService {
    findById(id, formLayout) {
        if (isObject(formLayout)) {
            for (const key of Object.keys(formLayout)) {
                if (key === id) {
                    return formLayout[key];
                }
            }
        }
        return null;
    }
    findByModel(model, formLayout) {
        let controlLayout = null;
        if (isObject(formLayout)) {
            for (const key of Object.keys(formLayout)) {
                key.split(",").forEach(substring => {
                    const selector = substring.trim();
                    if (selector === model.id || selector === model.type) {
                        controlLayout = formLayout[key];
                    }
                });
            }
        }
        return controlLayout;
    }
    filterTemplatesByModel(model, templates) {
        const filterCallback = (template) => {
            return template.modelId === model.id || template.modelType === model.type;
        };
        if (templates instanceof QueryList) {
            return templates.filter(filterCallback);
        }
        else if (Array.isArray(templates)) {
            return templates.filter(filterCallback);
        }
        return [];
    }
    getAlignedTemplate(model, templates, alignment) {
        return this.filterTemplatesByModel(model, templates)
            .find(template => template.as === null && template.align === alignment);
    }
    /*
    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
    }
    */
    getStartTemplate(model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);
    }
    getEndTemplate(model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);
    }
    getClass(layout, context, place) {
        if (isObject(layout) && layout.hasOwnProperty(context)) {
            const config = layout[context];
            if (config.hasOwnProperty(place)) {
                return config[place];
            }
        }
        return "";
    }
    getHostClass(layout) {
        const keys = ["element", "grid"];
        let cls = "";
        if (isObject(layout)) {
            keys.forEach(key => {
                if (isObject(layout[key]) && isString(layout[key]?.host)) {
                    cls = cls + ` ${layout[key]?.host}`;
                }
            });
        }
        return cls;
    }
    getElementId(model) {
        let id = model.id;
        let parent = model.parent;
        while (parent !== null) {
            if (parent instanceof DynamicFormArrayGroupModel) {
                id = `${parent.context.id}-${parent.index}-${model.id}`;
                break;
            }
            parent = parent.parent;
        }
        return id;
    }
}
DynamicFormLayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormLayoutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DynamicFormLayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormLayoutService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormLayoutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }] });

var DynamicFormHook;
(function (DynamicFormHook) {
    DynamicFormHook["Blur"] = "blur";
    DynamicFormHook["Change"] = "change";
    DynamicFormHook["Submit"] = "submit";
})(DynamicFormHook || (DynamicFormHook = {}));

const DYNAMIC_VALIDATORS = new InjectionToken("DYNAMIC_VALIDATORS");

const DEFAULT_ERROR_STATE_MATCHER = (control, model, hasFocus) => {
    return control.touched && !hasFocus;
};
const CHANGE_ERROR_STATE_MATCHER = (control, model, hasFocus) => {
    return (model.updateOn === DynamicFormHook.Change || model.updateOn === null) ? control.dirty : control.touched && !hasFocus;
};
const DYNAMIC_ERROR_MESSAGES_MATCHER = new InjectionToken("DYNAMIC_ERROR_MESSAGES_MATCHER");

class DynamicFormValidationService {
    constructor(_NG_VALIDATORS, _NG_ASYNC_VALIDATORS, _DYNAMIC_VALIDATORS, _DYNAMIC_ERROR_MESSAGES_MATCHER) {
        this._NG_VALIDATORS = _NG_VALIDATORS;
        this._NG_ASYNC_VALIDATORS = _NG_ASYNC_VALIDATORS;
        this._DYNAMIC_VALIDATORS = _DYNAMIC_VALIDATORS;
        this._DYNAMIC_ERROR_MESSAGES_MATCHER = _DYNAMIC_ERROR_MESSAGES_MATCHER;
    }
    getValidatorFn(validatorName, validatorArgs = null, validatorsToken = this._NG_VALIDATORS) {
        let validatorFn;
        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators
            validatorFn = Validators[validatorName];
        }
        else { // Custom Validators
            if (this._DYNAMIC_VALIDATORS && this._DYNAMIC_VALIDATORS.has(validatorName)) {
                validatorFn = this._DYNAMIC_VALIDATORS.get(validatorName);
            }
            else if (validatorsToken) {
                validatorFn = validatorsToken.find(validator => validator.name === validatorName);
            }
        }
        if (validatorFn === undefined) { // throw when no validator could be resolved
            throw new Error(`validator "${validatorName}" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);
        }
        if (validatorArgs !== null) {
            return validatorFn(validatorArgs);
        }
        return validatorFn;
    }
    getValidatorFns(validatorsConfig, validatorsToken = this._NG_VALIDATORS) {
        let validatorFns = [];
        if (isObject(validatorsConfig)) {
            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {
                const validatorConfigValue = validatorsConfig[validatorConfigKey];
                if (this.isValidatorDescriptor(validatorConfigValue)) {
                    const descriptor = validatorConfigValue;
                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);
                }
                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);
            });
        }
        return validatorFns;
    }
    getValidator(validatorName, validatorArgs = null) {
        return this.getValidatorFn(validatorName, validatorArgs);
    }
    getAsyncValidator(validatorName, validatorArgs = null) {
        return this.getValidatorFn(validatorName, validatorArgs, this._NG_ASYNC_VALIDATORS);
    }
    getValidators(validatorsConfig) {
        return this.getValidatorFns(validatorsConfig);
    }
    getAsyncValidators(asyncValidatorsConfig) {
        return this.getValidatorFns(asyncValidatorsConfig, this._NG_ASYNC_VALIDATORS);
    }
    updateValidators(validatorsConfig, control, model) {
        model.validators = validatorsConfig;
        if (validatorsConfig === null) {
            control.clearValidators();
        }
        else {
            control.setValidators(this.getValidators(validatorsConfig));
        }
        control.updateValueAndValidity();
    }
    updateAsyncValidators(asyncValidatorsConfig, control, model) {
        model.asyncValidators = asyncValidatorsConfig;
        if (asyncValidatorsConfig === null) {
            control.clearAsyncValidators();
        }
        else {
            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));
        }
        control.updateValueAndValidity();
    }
    showErrorMessages(control, model, hasFocus) {
        const precondition = control.invalid && model.hasErrorMessages;
        const matcher = this._DYNAMIC_ERROR_MESSAGES_MATCHER ? this._DYNAMIC_ERROR_MESSAGES_MATCHER(control, model, hasFocus) :
            DEFAULT_ERROR_STATE_MATCHER(control, model, hasFocus);
        return precondition && matcher;
    }
    parseErrorMessageConfig(template, model, error = null) {
        return template.replace(/{{\s*(.+?)\s*}}/mg, (_match, expression) => {
            let propertySource = model;
            let propertyName = expression;
            if (expression.indexOf("validator.") >= 0 && error) {
                propertySource = error;
                propertyName = expression.replace("validator.", "");
            }
            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?
                propertySource[propertyName] : null;
        });
    }
    createErrorMessages(control, model) {
        const messages = [];
        if (model.hasErrorMessages) {
            const messagesConfig = model.errorMessages;
            Object.keys(control.errors || {}).forEach(validationErrorKey => {
                let messageKey = validationErrorKey;
                if (validationErrorKey === "minlength" || validationErrorKey === "maxlength") {
                    messageKey = messageKey.replace("length", "Length");
                }
                if (messagesConfig.hasOwnProperty(messageKey)) {
                    const validationError = control.getError(validationErrorKey);
                    const messageTemplate = messagesConfig[messageKey];
                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));
                }
            });
        }
        return messages;
    }
    isFormHook(value) {
        return isString(value) && Object.values(DynamicFormHook).includes(value);
    }
    isValidatorDescriptor(value) {
        if (isObject(value)) {
            return value.hasOwnProperty("name") && value.hasOwnProperty("args");
        }
        return false;
    }
}
DynamicFormValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormValidationService, deps: [{ token: NG_VALIDATORS, optional: true }, { token: NG_ASYNC_VALIDATORS, optional: true }, { token: DYNAMIC_VALIDATORS, optional: true }, { token: DYNAMIC_ERROR_MESSAGES_MATCHER, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicFormValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormValidationService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormValidationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_VALIDATORS]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_ASYNC_VALIDATORS]
                }] }, { type: Map, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DYNAMIC_VALIDATORS]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DYNAMIC_ERROR_MESSAGES_MATCHER]
                }] }]; } });

const DYNAMIC_FORM_CONTROL_TYPE_GROUP = "GROUP";
class DynamicFormGroupModel extends DynamicFormControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_GROUP;
        this.group = Array.isArray(config.group) ? config.group : [];
        this.legend = config.legend ?? null;
    }
    get(index) {
        return this.group[index];
    }
    set(index, controlModel) {
        this.group[index] = controlModel;
    }
    add(controlModel) {
        this.group.push(controlModel);
    }
    insert(index, controlModel) {
        this.group.splice(index, 0, controlModel);
    }
    move(index, step) {
        this.group.splice(index + step, 0, ...this.group.splice(index, 1));
    }
    remove(index) {
        this.group.splice(index, 1);
    }
    size() {
        return this.group.length;
    }
}
__decorate([
    serializable()
], DynamicFormGroupModel.prototype, "group", void 0);
__decorate([
    serializable()
], DynamicFormGroupModel.prototype, "legend", void 0);
__decorate([
    serializable()
], DynamicFormGroupModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = "CHECKBOX_GROUP";
class DynamicCheckboxGroupModel extends DynamicFormGroupModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;
    }
    check(...indices) {
        indices.forEach(index => this.group[index].checked = true);
    }
    uncheck(...indices) {
        indices.forEach(index => this.group[index].checked = false);
    }
    checkAll() {
        this.group.forEach(model => model.checked = true);
    }
    uncheckAll() {
        this.group.forEach(model => model.checked = false);
    }
}
__decorate([
    serializable()
], DynamicCheckboxGroupModel.prototype, "group", void 0);
__decorate([
    serializable()
], DynamicCheckboxGroupModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = "COLORPICKER";
class DynamicColorPickerModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;
        this.format = isString(config.format) ? config.format : null;
        this.inline = isBoolean(config.inline) ? config.inline : false;
    }
}
__decorate([
    serializable()
], DynamicColorPickerModel.prototype, "format", void 0);
__decorate([
    serializable()
], DynamicColorPickerModel.prototype, "inline", void 0);
__decorate([
    serializable()
], DynamicColorPickerModel.prototype, "type", void 0);

class DynamicDateControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.format = config.format ?? null;
        this.max = config.max ?? null;
        this.min = config.min ?? null;
        this.placeholder = config.placeholder ?? null;
    }
}
__decorate([
    serializable()
], DynamicDateControlModel.prototype, "format", void 0);
__decorate([
    serializable()
], DynamicDateControlModel.prototype, "max", void 0);
__decorate([
    serializable()
], DynamicDateControlModel.prototype, "min", void 0);
__decorate([
    serializable()
], DynamicDateControlModel.prototype, "placeholder", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = "DATEPICKER";
class DynamicDatePickerModel extends DynamicDateControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;
        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        this.focusedDate = config.focusedDate ?? null;
        this.inline = isBoolean(config.inline) ? config.inline : false;
        this.prefix = config.prefix ?? null;
        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;
        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;
        this.suffix = config.suffix ?? null;
    }
}
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "autoFocus", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "focusedDate", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "inline", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "prefix", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "readOnly", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "suffix", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "toggleIcon", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "toggleLabel", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = "EDITOR";
class DynamicEditorModel extends DynamicInputControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;
    }
}
__decorate([
    serializable()
], DynamicEditorModel.prototype, "type", void 0);

class DynamicFileControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.multiple = isBoolean(config.multiple) ? config.multiple : false;
    }
}
__decorate([
    serializable()
], DynamicFileControlModel.prototype, "multiple", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = "FILE_UPLOAD";
class DynamicFileUploadModel extends DynamicFileControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;
        this.accept = Array.isArray(config.accept) ? config.accept : null;
        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;
        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;
        this.minSize = isNumber(config.minSize) ? config.minSize : null;
        this.removeUrl = config.removeUrl ?? null;
        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;
        this.url = config.url ?? null;
    }
}
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "accept", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "autoUpload", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "maxSize", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "minSize", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "removeUrl", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "showFileList", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "url", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "type", void 0);

class DynamicFormOption {
    constructor(config) {
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.label = config.label ?? null;
        this.value = config.value;
    }
    get text() {
        return this.label;
    }
    set text(text) {
        this.label = text;
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable()
], DynamicFormOption.prototype, "disabled", void 0);
__decorate([
    serializable()
], DynamicFormOption.prototype, "label", void 0);
__decorate([
    serializable()
], DynamicFormOption.prototype, "value", void 0);
class DynamicOptionControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this._options = [];
        this.options = config.options;
    }
    updateOptions$() {
        this.options$ = of(this.options);
    }
    set options(options) {
        if (Array.isArray(options)) {
            this._options = options.map(optionConfig => new DynamicFormOption(optionConfig));
            this.updateOptions$();
        }
        else if (isObservable(options)) {
            this.options$ = options.pipe(map(optionsConfig => {
                this._options = optionsConfig.map(optionConfig => new DynamicFormOption(optionConfig));
                return this._options;
            }));
        }
        else {
            this.updateOptions$();
        }
    }
    get options() {
        return this._options;
    }
    add(optionConfig) {
        return this.insert(this.options.length, optionConfig);
    }
    get(index) {
        return this.options[index];
    }
    insert(index, optionConfig) {
        const option = new DynamicFormOption(optionConfig);
        this.options.splice(index, 0, option);
        this.updateOptions$();
        return option;
    }
    remove(...indices) {
        indices.forEach(index => this.options.splice(index, 1));
        this.updateOptions$();
    }
}
__decorate([
    serializable("options")
], DynamicOptionControlModel.prototype, "_options", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = "RADIO_GROUP";
class DynamicRadioGroupModel extends DynamicOptionControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;
        this.legend = config.legend ?? null;
    }
    select(index) {
        this.value = this.get(index).value;
    }
}
__decorate([
    serializable()
], DynamicRadioGroupModel.prototype, "legend", void 0);
__decorate([
    serializable()
], DynamicRadioGroupModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_RATING = "RATING";
class DynamicRatingModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_RATING;
        this.max = isNumber(config.max) ? config.max : 10;
    }
}
__decorate([
    serializable()
], DynamicRatingModel.prototype, "max", void 0);
__decorate([
    serializable()
], DynamicRatingModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_SELECT = "SELECT";
class DynamicSelectModel extends DynamicOptionControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_SELECT;
        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : Object.is;
        this.filterable = isBoolean(config.filterable) ? config.filterable : false;
        this.multiple = isBoolean(config.multiple) ? config.multiple : false;
        this.placeholder = config.placeholder ?? "";
        this.prefix = config.prefix ?? null;
        this.suffix = config.suffix ?? null;
    }
    select(...indices) {
        this.value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;
    }
}
__decorate([
    serializable()
], DynamicSelectModel.prototype, "filterable", void 0);
__decorate([
    serializable()
], DynamicSelectModel.prototype, "multiple", void 0);
__decorate([
    serializable()
], DynamicSelectModel.prototype, "placeholder", void 0);
__decorate([
    serializable()
], DynamicSelectModel.prototype, "prefix", void 0);
__decorate([
    serializable()
], DynamicSelectModel.prototype, "suffix", void 0);
__decorate([
    serializable()
], DynamicSelectModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = "SLIDER";
class DynamicSliderModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;
        this.max = isNumber(config.max) ? config.max : 10;
        this.min = isNumber(config.min) ? config.min : 0;
        this.step = isNumber(config.step) ? config.step : 1;
        this.vertical = isBoolean(config.vertical) ? config.vertical : false;
    }
}
__decorate([
    serializable()
], DynamicSliderModel.prototype, "max", void 0);
__decorate([
    serializable()
], DynamicSliderModel.prototype, "min", void 0);
__decorate([
    serializable()
], DynamicSliderModel.prototype, "step", void 0);
__decorate([
    serializable()
], DynamicSliderModel.prototype, "vertical", void 0);
__decorate([
    serializable()
], DynamicSliderModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = "SWITCH";
class DynamicSwitchModel extends DynamicCheckControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;
        this.offLabel = config.offLabel ?? null;
        this.onLabel = config.onLabel ?? null;
    }
}
__decorate([
    serializable()
], DynamicSwitchModel.prototype, "offLabel", void 0);
__decorate([
    serializable()
], DynamicSwitchModel.prototype, "onLabel", void 0);
__decorate([
    serializable()
], DynamicSwitchModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = "TEXTAREA";
const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = "hard";
const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = "soft";
class DynamicTextAreaModel extends DynamicInputControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;
        this.cols = isNumber(config.cols) ? config.cols : 20;
        this.rows = isNumber(config.rows) ? config.rows : 2;
        this.wrap = config.wrap ?? DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;
    }
}
__decorate([
    serializable()
], DynamicTextAreaModel.prototype, "cols", void 0);
__decorate([
    serializable()
], DynamicTextAreaModel.prototype, "rows", void 0);
__decorate([
    serializable()
], DynamicTextAreaModel.prototype, "wrap", void 0);
__decorate([
    serializable()
], DynamicTextAreaModel.prototype, "type", void 0);

const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = "TIMEPICKER";
class DynamicTimePickerModel extends DynamicDateControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;
        this.meridian = isBoolean(config.meridian) ? config.meridian : false;
        this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;
    }
}
__decorate([
    serializable()
], DynamicTimePickerModel.prototype, "meridian", void 0);
__decorate([
    serializable()
], DynamicTimePickerModel.prototype, "showSeconds", void 0);
__decorate([
    serializable()
], DynamicTimePickerModel.prototype, "type", void 0);

function maskToString(mask) {
    if (isString(mask)) {
        return mask;
    }
    else if (mask instanceof RegExp) {
        return mask.toString();
    }
    else if (Array.isArray(mask)) {
        return mask.map(value => maskToString(value));
    }
    return null;
}
function maskFromString(mask) {
    if (isString(mask)) {
        const isRegExp = mask.startsWith("/") && mask.endsWith("/");
        return isRegExp ? new RegExp(mask.slice(1, mask.length - 1)) : mask;
    }
    else if (Array.isArray(mask)) {
        return mask.map(value => maskFromString(value));
    }
    return null;
}
function parseReviver(_key, value) {
    const regexDateISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|([+\-])([\d|:]*))?$/;
    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;
}

class DynamicFormService {
    constructor(componentService, validationService) {
        this.componentService = componentService;
        this.validationService = validationService;
    }
    createAbstractControlOptions(validatorsConfig = null, asyncValidatorsConfig = null, updateOn = null) {
        return {
            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,
            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,
            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : DynamicFormHook.Change
        };
    }
    createFormArray(formArrayModel) {
        const controls = [];
        const options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators, formArrayModel.updateOn);
        for (let index = 0; index < formArrayModel.size; index++) {
            const groupModel = formArrayModel.get(index);
            const groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators, formArrayModel.groupAsyncValidators, formArrayModel.updateOn);
            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));
        }
        return new UntypedFormArray(controls, options);
    }
    createFormGroup(formModel, options = null, parent = null) {
        const controls = {};
        formModel.forEach(model => {
            model.parent = parent;
            switch (model.type) {
                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                    controls[model.id] = this.createFormArray(model);
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                    const groupModel = model;
                    const groupOptions = this.createAbstractControlOptions(groupModel.validators, groupModel.asyncValidators, groupModel.updateOn);
                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);
                    break;
                default:
                    const controlModel = model;
                    const controlState = { value: controlModel.value, disabled: controlModel.disabled };
                    const controlOptions = this.createAbstractControlOptions(controlModel.validators, controlModel.asyncValidators, controlModel.updateOn);
                    controls[model.id] = new UntypedFormControl(controlState, controlOptions);
            }
        });
        return new UntypedFormGroup(controls, options);
    }
    getPathSegment(model) {
        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : model.id;
    }
    getPath(model, join = false) {
        const path = [this.getPathSegment(model)];
        let parent = model.parent;
        while (parent) {
            path.unshift(this.getPathSegment(parent));
            parent = parent.parent;
        }
        return join ? path.join(".") : path;
    }
    addFormGroupControl(formGroup, formModel, ...models) {
        if (formModel instanceof DynamicFormGroupModel) {
            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);
        }
        else {
            const model = formModel;
            this.insertFormGroupControl(model.length, formGroup, model, ...models);
        }
    }
    moveFormGroupControl(index, step, formModel) {
        if (formModel instanceof DynamicFormGroupModel) {
            formModel.move(index, step);
        }
        else {
            const model = formModel;
            model.splice(index + step, 0, ...model.splice(index, 1));
        }
    }
    insertFormGroupControl(index, formGroup, formModel, ...models) {
        const parent = formModel instanceof DynamicFormGroupModel ? formModel : null;
        const controls = this.createFormGroup(models, null, parent).controls;
        Object.keys(controls).forEach((controlName, idx) => {
            const controlModel = models[idx];
            if (formModel instanceof DynamicFormGroupModel) {
                formModel.insert(index, controlModel);
            }
            else {
                formModel.splice(index, 0, controlModel);
            }
            formGroup.addControl(controlName, controls[controlName]);
        });
    }
    removeFormGroupControl(index, formGroup, formModel) {
        if (formModel instanceof DynamicFormGroupModel) {
            formGroup.removeControl(formModel.get(index).id);
            formModel.remove(index);
        }
        else {
            formGroup.removeControl(formModel[index].id);
            formModel.splice(index, 1);
        }
    }
    addFormArrayGroup(formArray, formArrayModel) {
        const groupModel = formArrayModel.addGroup();
        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));
    }
    insertFormArrayGroup(index, formArray, formArrayModel) {
        const groupModel = formArrayModel.insertGroup(index);
        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));
    }
    moveFormArrayGroup(index, step, formArray, formArrayModel) {
        const newIndex = index + step;
        const moveUp = step >= 0;
        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {
            const movingGroups = [];
            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {
                movingGroups.push(formArray.at(i));
            }
            movingGroups.forEach((formControl, idx) => {
                let position;
                if (moveUp) {
                    position = idx === 0 ? newIndex : index + idx - 1;
                }
                else {
                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;
                }
                formArray.setControl(position, formControl);
            });
            formArrayModel.moveGroup(index, step);
        }
        else {
            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);
        }
    }
    removeFormArrayGroup(index, formArray, formArrayModel) {
        formArray.removeAt(index);
        formArrayModel.removeGroup(index);
    }
    clearFormArray(formArray, formArrayModel) {
        formArray.clear();
        formArrayModel.clear();
    }
    findById(id, formModel) {
        const findByIdFn = (modelId, groupModel) => {
            for (const controlModel of groupModel) {
                if (controlModel.id === modelId) {
                    result = controlModel;
                    break;
                }
                if (controlModel instanceof DynamicFormGroupModel) {
                    findByIdFn(modelId, controlModel.group);
                }
            }
        };
        let result = null;
        findByIdFn(id, formModel);
        return result;
    }
    findModelById(id, formModel) {
        return this.findById(id, formModel);
    }
    findControlByModel(model, group) {
        return group.root.get(this.getPath(model, true));
    }
    detectChanges(formComponent) {
        if (formComponent instanceof DynamicFormComponent) {
            formComponent.markForCheck();
            formComponent.detectChanges();
        }
        else {
            for (const form of this.componentService.getForms()) {
                form.markForCheck();
                form.detectChanges();
            }
        }
    }
    fromJSON(json) {
        const formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json;
        const formModel = [];
        formModelJSON.forEach((model) => {
            const layout = model.layout ?? null;
            switch (model.type) {
                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                    const formArrayModel = model;
                    if (Array.isArray(formArrayModel.groups)) {
                        formArrayModel.groups.forEach((groupModel) => {
                            groupModel.group = this.fromJSON(groupModel.group);
                        });
                    }
                    formArrayModel.groupFactory = () => this.fromJSON(formArrayModel.groupPrototype);
                    formModel.push(new DynamicFormArrayModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                    formModel.push(new DynamicCheckboxModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                    model.group = this.fromJSON(model.group);
                    formModel.push(new DynamicCheckboxGroupModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:
                    formModel.push(new DynamicColorPickerModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
                    formModel.push(new DynamicDatePickerModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:
                    formModel.push(new DynamicEditorModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:
                    model.value = null;
                    formModel.push(new DynamicFileUploadModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                    model.group = this.fromJSON(model.group);
                    formModel.push(new DynamicFormGroupModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                    formModel.push(new DynamicInputModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                    formModel.push(new DynamicRadioGroupModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_RATING:
                    formModel.push(new DynamicRatingModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                    formModel.push(new DynamicSelectModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
                    formModel.push(new DynamicSliderModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
                    formModel.push(new DynamicSwitchModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                    formModel.push(new DynamicTextAreaModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
                    formModel.push(new DynamicTimePickerModel(model, layout));
                    break;
                default:
                    throw new Error(`unknown form control model type defined on JSON object with id "${model.id}"`);
            }
        });
        return formModel;
    }
}
DynamicFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormService, deps: [{ token: DynamicFormComponentService }, { token: DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }], ctorParameters: function () { return [{ type: DynamicFormComponentService }, { type: DynamicFormValidationService }]; } });

const MATCH_DISABLED = "DISABLED";
const MATCH_ENABLED = "ENABLED";
const MATCH_HIDDEN = "HIDDEN";
const MATCH_OPTIONAL = "OPTIONAL";
const MATCH_REQUIRED = "REQUIRED";
const MATCH_VISIBLE = "VISIBLE";
const AND_OPERATOR = "AND";
const OR_OPERATOR = "OR";
const DYNAMIC_MATCHERS = new InjectionToken("DYNAMIC_MATCHERS");
const DISABLED_MATCHER = {
    match: MATCH_DISABLED,
    opposingMatch: MATCH_ENABLED,
    onChange(hasMatch, model) {
        model.disabled = hasMatch;
    }
};
const HIDDEN_MATCHER = {
    match: MATCH_HIDDEN,
    opposingMatch: MATCH_VISIBLE,
    onChange(hasMatch, model) {
        model.hidden = hasMatch;
    }
};
const REQUIRED_MATCHER = {
    match: MATCH_REQUIRED,
    opposingMatch: MATCH_OPTIONAL,
    onChange(hasMatch, model, control, injector) {
        let validatorsConfig = null;
        if (hasMatch) {
            validatorsConfig = isObject(model.validators) ? { ...model.validators, required: null } : { required: null };
        }
        else {
            if (isObject(model.validators)) {
                delete model.validators.required;
                validatorsConfig = { ...model.validators };
            }
        }
        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);
        injector.get(DynamicFormService).detectChanges();
    }
};
const DISABLED_MATCHER_PROVIDER = {
    provide: DYNAMIC_MATCHERS,
    useValue: DISABLED_MATCHER,
    multi: true
};
const HIDDEN_MATCHER_PROVIDER = {
    provide: DYNAMIC_MATCHERS,
    useValue: HIDDEN_MATCHER,
    multi: true
};
const REQUIRED_MATCHER_PROVIDER = {
    provide: DYNAMIC_MATCHERS,
    useValue: REQUIRED_MATCHER,
    multi: true
};
const DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER_PROVIDER, HIDDEN_MATCHER_PROVIDER, REQUIRED_MATCHER_PROVIDER];

class DynamicFormRelationService {
    constructor(MATCHERS, injector) {
        this.MATCHERS = MATCHERS;
        this.injector = injector;
    }
    getRelatedFormControls(model, group) {
        const conditionReducer = (controls, condition) => {
            const path = condition.rootPath ?? condition.id;
            if (isString(path) && !controls.hasOwnProperty(path)) {
                const control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);
                control instanceof UntypedFormControl ?
                    controls[path] = control : console.warn(`No related form control with id ${condition.id} could be found`);
            }
            return controls;
        };
        const relationReducer = (controls, relation) => relation.when.reduce(conditionReducer, controls);
        return model.relations.reduce(relationReducer, {});
    }
    findRelationByMatcher(relations, matcher) {
        return relations.find(relation => [matcher.match, matcher.opposingMatch].includes(relation.match));
    }
    matchesCondition(relation, relatedFormControls, matcher) {
        const operator = relation.operator ?? OR_OPERATOR;
        return relation.when.reduce((hasMatched, condition, index) => {
            const path = condition.rootPath ?? condition.id;
            let relatedFormControl;
            for (const [key, control] of Object.entries(relatedFormControls)) {
                if (key === path) {
                    relatedFormControl = control;
                    break;
                }
            }
            if (relatedFormControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasMatched) {
                    return true;
                }
                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;
            }
            if (relatedFormControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasMatched) {
                    return false;
                }
                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);
            }
            return false;
        }, false);
    }
    subscribeRelations(model, group, control) {
        const relatedFormControls = this.getRelatedFormControls(model, group);
        const subscriptions = [];
        Object.values(relatedFormControls).forEach(relatedControl => {
            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value), distinctUntilChanged());
            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status), distinctUntilChanged());
            subscriptions.push(merge(valueChanges, statusChanges).subscribe(() => {
                this.MATCHERS.forEach(matcher => {
                    const relation = this.findRelationByMatcher(model.relations, matcher);
                    if (relation !== undefined) {
                        const hasMatch = this.matchesCondition(relation, relatedFormControls, matcher);
                        matcher.onChange(hasMatch, model, control, this.injector);
                    }
                });
            }));
        });
        return subscriptions;
    }
}
DynamicFormRelationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormRelationService, deps: [{ token: DYNAMIC_MATCHERS, optional: true }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicFormRelationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormRelationService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormRelationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root"
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DYNAMIC_MATCHERS]
                }] }, { type: i0.Injector }]; } });

// tslint:disable-next-line:directive-class-suffix
class DynamicFormControlContainerComponent {
    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this._hasFocus = false;
        this.context = null;
        this.componentSubscriptions = [];
        this.subscriptions = [];
    }
    ngOnChanges(changes) {
        const groupChange = changes.group;
        const layoutChange = changes.layout;
        const modelChange = changes.model;
        if (layoutChange || modelChange) {
            this.onLayoutOrModelChange();
        }
        if (modelChange) {
            this.onModelChange();
        }
        if (groupChange || modelChange) {
            this.onGroupOrModelChange();
        }
    }
    ngOnInit() {
        this.subscriptions.push(this.control.statusChanges.pipe(bufferCount(2, 1), map(states => states[0]), filter(previousState => previousState === "PENDING")).subscribe(_status => this.markForCheck()));
    }
    ngOnDestroy() {
        this.destroyFormControlComponent();
        this.unsubscribe();
    }
    get id() {
        return this.layoutService.getElementId(this.model);
    }
    get hasFocus() {
        return this._hasFocus;
    }
    get isInvalid() {
        return this.control.invalid;
    }
    get isValid() {
        return this.control.valid;
    }
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    get showErrorMessages() {
        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);
    }
    get hasLabel() {
        return isString(this.model.label);
    }
    get hasHint() {
        return isString(this.model.hint);
    }
    get hint() {
        return this.model.hint ?? null;
    }
    get isCheckbox() {
        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
    }
    get templates() {
        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
    }
    get startTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
    }
    get endTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
    }
    getClass(context, place) {
        return this.layoutService.getClass(this.controlLayout, context, place);
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
        const component = this.componentRef && this.componentRef.instance;
        if (component && (component instanceof DynamicFormGroupComponent || component instanceof DynamicFormArrayComponent)) {
            component.markForCheck();
        }
    }
    createFormControlComponent() {
        const componentType = this.componentType;
        if (componentType !== null) {
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentViewContainerRef.clear();
            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
            const component = this.componentRef.instance;
            component.formLayout = this.layout;
            component.group = this.group;
            component.layout = this.controlLayout;
            component.model = this.model;
            if (this.templates) {
                component.templates = this.templates;
            }
            this.componentSubscriptions.push(component.blur.subscribe(($event) => this.onBlur($event)));
            this.componentSubscriptions.push(component.change.subscribe(($event) => this.onChange($event)));
            this.componentSubscriptions.push(component.focus.subscribe(($event) => this.onFocus($event)));
            if (component.customEvent !== undefined) {
                this.componentSubscriptions.push(component.customEvent.subscribe(($event) => this.onCustomEvent($event)));
            }
            this.registerFormControlComponentRef(this.componentRef);
        }
    }
    destroyFormControlComponent() {
        if (this.componentRef) {
            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());
            this.componentSubscriptions = [];
            this.unregisterFormControlComponentRef();
            this.componentRef.destroy();
        }
    }
    createDynamicFormControlEvent($event, type) {
        return { $event, context: this.context, control: this.control, group: this.group, model: this.model, type };
    }
    unsubscribe() {
        // this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());
        // this.componentSubscriptions = [];
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = [];
    }
    onControlValueChanges(value) {
        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {
            this.model.value = value;
        }
    }
    onModelValueUpdates(value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    }
    onModelDisabledUpdates(disabled) {
        disabled ? this.control.disable() : this.control.enable();
    }
    onLayoutOrModelChange() {
        this.controlLayout = this.layoutService.findByModel(this.model, this.layout) ?? this.model.layout;
        this.klass = `${Array.isArray(this.hostClass) ? this.hostClass.join(" ") : ""} ${this.layoutService.getHostClass(this.controlLayout)}`;
    }
    onModelChange() {
        this.destroyFormControlComponent();
        this.createFormControlComponent();
    }
    onGroupOrModelChange() {
        if (this.model) {
            this.unsubscribe();
            if (this.group) {
                this.control = this.group.get(this.model.id);
                this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));
            }
            this.subscriptions.push(this.model.disabledChanges.subscribe(value => this.onModelDisabledUpdates(value)));
            if (this.model instanceof DynamicFormValueControlModel) {
                const model = this.model;
                this.subscriptions.push(model.valueChanges.subscribe(value => this.onModelValueUpdates(value)));
            }
            if (this.model.relations.length > 0) {
                this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));
            }
        }
    }
    onChange($event) {
        if ($event instanceof Event) { // native HTML5 change event
            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                const model = this.model;
                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    const inputElement = $event.target;
                    model.files = inputElement.files;
                }
            }
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
        else if (isDynamicFormControlEvent($event)) { // event bypass
            this.change.emit($event);
        }
        else { // custom library value change event
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
    }
    onBlur($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.blur.emit($event);
        }
        else { // native HTML 5 or UI library blur event
            this._hasFocus = false;
            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
        }
    }
    onFocus($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.focus.emit($event);
        }
        else { // native HTML 5 or UI library focus event
            this._hasFocus = true;
            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
        }
    }
    onCustomEvent($event) {
        const emitter = this.customEvent;
        if (isDynamicFormControlEvent($event)) { // child event bypass
            emitter.emit($event);
        }
        else { // native UI library custom event
            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
        }
    }
    registerFormControlComponentRef(ref) {
        if (this.context instanceof DynamicFormArrayGroupModel) {
            this.componentService.registerFormControl(this.model, ref, this.context.index);
        }
        else {
            this.componentService.registerFormControl(this.model, ref);
        }
    }
    unregisterFormControlComponentRef() {
        if (this.context instanceof DynamicFormArrayGroupModel) {
            this.componentService.unregisterFormControl(this.model.id, this.context.index);
        }
        else {
            this.componentService.unregisterFormControl(this.model.id);
        }
    }
}
DynamicFormControlContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormControlContainerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ComponentFactoryResolver }, { token: DynamicFormLayoutService }, { token: DynamicFormValidationService }, { token: DynamicFormComponentService }, { token: DynamicFormRelationService }], target: i0.ɵɵFactoryTarget.Directive });
DynamicFormControlContainerComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: DynamicFormControlContainerComponent, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormControlContainerComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ComponentFactoryResolver }, { type: DynamicFormLayoutService }, { type: DynamicFormValidationService }, { type: DynamicFormComponentService }, { type: DynamicFormRelationService }]; } });

// tslint:disable-next-line:directive-class-suffix
class DynamicFormControlWithTemplateComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
    }
    ngAfterViewInit() {
        this.layoutService
            .filterTemplatesByModel(this.model, this.templates)
            .forEach(template => this.bindTemplate(template));
    }
    bindTemplate(template) {
        if (isString(template.as) && this.templateDirectives.has(template.as)) {
            const property = this.templateDirectives.get(template.as);
            this.viewChild[property] = this.mapTemplate(template);
        }
    }
}
DynamicFormControlWithTemplateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormControlWithTemplateComponent, deps: [{ token: DynamicFormLayoutService }, { token: DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Directive });
DynamicFormControlWithTemplateComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: DynamicFormControlWithTemplateComponent, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormControlWithTemplateComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: DynamicFormLayoutService }, { type: DynamicFormValidationService }]; } });

class DynamicListDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        if (isString(this.listId)) {
            this.renderer.setAttribute(this.elementRef.nativeElement, "list", this.listId);
        }
    }
}
DynamicListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicListDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
DynamicListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: DynamicListDirective, selector: "[dynamicList]", inputs: { listId: ["dynamicList", "listId"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[dynamicList]"
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { listId: [{
                type: Input,
                args: ["dynamicList"]
            }] } });

const AUTOCOMPLETE_OFF = "off";
const AUTOCOMPLETE_ON = "on";
const AUTOFILL_TOKEN_BILLING = "billing";
const AUTOFILL_TOKEN_SHIPPING = "shipping";
const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];
const AUTOFILL_TOKEN_HOME = "home";
const AUTOFILL_TOKEN_WORK = "work";
const AUTOFILL_TOKEN_MOBILE = "mobile";
const AUTOFILL_TOKEN_FAX = "fax";
const AUTOFILL_TOKEN_PAGER = "pager";
const AUTOFILL_TOKENS_CONTACT = [
    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK
];
const AUTOFILL_FIELD_STREET_ADDRESS = "street-address";
const AUTOFILL_FIELD_ADDRESS_LINE_1 = "address-line1";
const AUTOFILL_FIELD_ADDRESS_LINE_2 = "address-line2";
const AUTOFILL_FIELD_ADDRESS_LINE_3 = "address-line3";
const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = "address-level4";
const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = "address-level3";
const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = "address-level2";
const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = "address-level1";
const AUTOFILL_FIELD_NAME = "name";
const AUTOFILL_FIELD_HONORIFIC_PREFIX = "honorific-prefix";
const AUTOFILL_FIELD_GIVEN_NAME = "given-name";
const AUTOFILL_FIELD_ADDITIONAL_NAME = "additional-name";
const AUTOFILL_FIELD_FAMILY_NAME = "family-name";
const AUTOFILL_FIELD_HONORIFIC_SUFFIX = "honorific-suffix";
const AUTOFILL_FIELD_NICKNAME = "nickname";
const AUTOFILL_FIELD_USERNAME = "username";
const AUTOFILL_FIELD_NEW_PASSWORD = "new-password";
const AUTOFILL_FIELD_CURRENT_PASSWORD = "current-password";
const AUTOFILL_FIELD_ORGANIZATION_TITLE = "organization-title";
const AUTOFILL_FIELD_ORGANIZATION = "organization";
const AUTOFILL_FIELD_COUNTRY = "country";
const AUTOFILL_FIELD_COUNTRY_NAME = "country-name";
const AUTOFILL_FIELD_POSTAL_CODE = "postal-code";
const AUTOFILL_FIELD_CC_NAME = "cc-name";
const AUTOFILL_FIELD_CC_GIVEN_NAME = "cc-given-name";
const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = "cc-additional-name";
const AUTOFILL_FIELD_CC_FAMILY_NAME = "cc-family-name";
const AUTOFILL_FIELD_CC_NUMBER = "cc-number";
const AUTOFILL_FIELD_CC_EXP = "cc-exp";
const AUTOFILL_FIELD_CC_EXP_MONTH = "cc-exp-month";
const AUTOFILL_FIELD_CC_EXP_YEAR = "cc-exp-year";
const AUTOFILL_FIELD_CC_CSC = "cc-csc";
const AUTOFILL_FIELD_CC_TYPE = "cc-type";
const AUTOFILL_FIELD_TRANSACTION_CURRENCY = "transaction-currency";
const AUTOFILL_FIELD_TRANSACTION_AMOUNT = "transaction-amount";
const AUTOFILL_FIELD_LANGUAGE = "language";
const AUTOFILL_FIELD_BDAY = "bday";
const AUTOFILL_FIELD_BDAY_DAY = "bday-day";
const AUTOFILL_FIELD_BDAY_MONTH = "bday-month";
const AUTOFILL_FIELD_BDAY_YEAR = "bday-year";
const AUTOFILL_FIELD_SEX = "sex";
const AUTOFILL_FIELD_URL = "url";
const AUTOFILL_FIELD_PHOTO = "photo";
const AUTOFILL_FIELDS = [
    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,
    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,
    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,
    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,
    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,
    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,
    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,
    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,
    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,
    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,
    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,
    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO
];
const AUTOFILL_FIELD_TEL = "tel";
const AUTOFILL_FIELD_TEL_COUNTRY_CODE = "tel-country-code";
const AUTOFILL_FIELD_TEL_NATIONAL = "tel-national";
const AUTOFILL_FIELD_TEL_AREA_CODE = "tel-area-code";
const AUTOFILL_FIELD_TEL_LOCAL = "tel-local";
const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = "tel-local-prefix";
const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = "tel-local-suffix";
const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = "tel-extension";
const AUTOFILL_FIELD_EMAIL = "email";
const AUTOFILL_FIELD_IMPP = "impp";
const AUTOFILL_FIELDS_CONTACT = [
    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,
    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,
    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP
];
function isAddressToken(token) {
    return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;
}
function isContactField(token) {
    return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;
}
function isContactToken(token) {
    return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;
}
function isField(token) {
    return AUTOFILL_FIELDS.indexOf(token) > -1;
}
function isSectionToken(token) {
    return token.startsWith("section-");
}
function validate(tokens) {
    const toExpression = (total, currentValue) => `${total}|${currentValue}`;
    const tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression);
    const tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression);
    const fields = AUTOFILL_FIELDS.reduce(toExpression);
    const fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression);
    const regex = new RegExp(`^(section-\\w+\\s{1})?((${tokensAddress}){1}\\s)?((${fields}){1}|((${tokensContact}){1}\\s{1}(${fieldsContact})))$`);
    return regex.test(tokens);
}

class DynamicFormsCoreModule {
    /*@deprecated*/
    static forRoot() {
        return {
            ngModule: DynamicFormsCoreModule,
            providers: [
                DynamicFormService,
                DynamicFormLayoutService,
                DynamicFormValidationService,
                DynamicFormComponentService,
                DynamicFormRelationService
            ]
        };
    }
}
DynamicFormsCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DynamicFormsCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsCoreModule, declarations: [DynamicListDirective,
        DynamicTemplateDirective], imports: [CommonModule,
        ReactiveFormsModule], exports: [DynamicListDirective,
        DynamicTemplateDirective] });
DynamicFormsCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsCoreModule, imports: [CommonModule,
        ReactiveFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormsCoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule
                    ],
                    declarations: [
                        DynamicListDirective,
                        DynamicTemplateDirective
                    ],
                    exports: [
                        DynamicListDirective,
                        DynamicTemplateDirective
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AND_OPERATOR, AUTOCOMPLETE_OFF, AUTOCOMPLETE_ON, AUTOFILL_FIELDS, AUTOFILL_FIELDS_CONTACT, AUTOFILL_FIELD_ADDITIONAL_NAME, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2, AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY, AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_CC_ADDITIONAL_NAME, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH, AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_IMPP, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_NAME, AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_ORGANIZATION_TITLE, AUTOFILL_FIELD_PHOTO, AUTOFILL_FIELD_POSTAL_CODE, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_AREA_CODE, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_TRANSACTION_CURRENCY, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_USERNAME, AUTOFILL_TOKENS_ADDRESS, AUTOFILL_TOKENS_CONTACT, AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_SHIPPING, AUTOFILL_TOKEN_WORK, CHANGE_ERROR_STATE_MATCHER, DEFAULT_ERROR_STATE_MATCHER, DISABLED_MATCHER, DISABLED_MATCHER_PROVIDER, DYNAMIC_ERROR_MESSAGES_MATCHER, DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR, DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH, DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER, DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD, DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH, DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT, DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME, DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK, DYNAMIC_FORM_CONTROL_MAP_FN, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_RATING, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER, DYNAMIC_FORM_TEXTAREA_WRAP_HARD, DYNAMIC_FORM_TEXTAREA_WRAP_SOFT, DYNAMIC_MATCHERS, DYNAMIC_MATCHER_PROVIDERS, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT, DYNAMIC_VALIDATORS, DynamicCheckControlModel, DynamicCheckboxGroupModel, DynamicCheckboxModel, DynamicColorPickerModel, DynamicDateControlModel, DynamicDatePickerModel, DynamicEditorModel, DynamicFileControlModel, DynamicFileUploadModel, DynamicFormArrayComponent, DynamicFormArrayGroupModel, DynamicFormArrayModel, DynamicFormComponent, DynamicFormComponentService, DynamicFormControlComponent, DynamicFormControlContainerComponent, DynamicFormControlEventType, DynamicFormControlModel, DynamicFormControlWithTemplateComponent, DynamicFormGroupComponent, DynamicFormGroupModel, DynamicFormHook, DynamicFormLayoutService, DynamicFormOption, DynamicFormRelationService, DynamicFormService, DynamicFormValidationService, DynamicFormValueControlModel, DynamicFormsCoreModule, DynamicInputControlModel, DynamicInputModel, DynamicListDirective, DynamicOptionControlModel, DynamicRadioGroupModel, DynamicRatingModel, DynamicSelectModel, DynamicSliderModel, DynamicSwitchModel, DynamicTemplateDirective, DynamicTextAreaModel, DynamicTimePickerModel, HIDDEN_MATCHER, HIDDEN_MATCHER_PROVIDER, MATCH_DISABLED, MATCH_ENABLED, MATCH_HIDDEN, MATCH_OPTIONAL, MATCH_REQUIRED, MATCH_VISIBLE, METADATA_KEY_SERIALIZABLE, OR_OPERATOR, REQUIRED_MATCHER, REQUIRED_MATCHER_PROVIDER, getSerializables, isAddressToken, isBoolean, isContactField, isContactToken, isDynamicFormControlEvent, isField, isFunction, isNumber, isObject, isSectionToken, isString, maskFromString, maskToString, parseReviver, serializable, serialize, validate };
//# sourceMappingURL=core.mjs.map
//# sourceMappingURL=core.mjs.map
