import { __decorate } from "tslib";
import { DynamicFileControlModel } from "../dynamic-file-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isNumber } from "../../utils/core.utils";
export const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = "FILE_UPLOAD";
export class DynamicFileUploadModel extends DynamicFileControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;
        this.accept = Array.isArray(config.accept) ? config.accept : null;
        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;
        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;
        this.minSize = isNumber(config.minSize) ? config.minSize : null;
        this.removeUrl = config.removeUrl ?? null;
        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;
        this.url = config.url ?? null;
    }
}
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "accept", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "autoUpload", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "maxSize", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "minSize", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "removeUrl", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "showFileList", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "url", void 0);
__decorate([
    serializable()
], DynamicFileUploadModel.prototype, "type", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1maWxlLXVwbG9hZC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvY29yZS9zcmMvbGliL21vZGVsL2ZpbGUtdXBsb2FkL2R5bmFtaWMtZmlsZS11cGxvYWQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUMsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV2RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FBRyxhQUFhLENBQUM7QUFZbkUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHVCQUF1QjtJQVcvRCxZQUFZLE1BQW9DLEVBQUUsTUFBaUM7UUFDL0UsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUhELFNBQUksR0FBVyxxQ0FBcUMsQ0FBQztRQUsxRSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDMUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNoRixJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQXJCbUI7SUFBZixZQUFZLEVBQUU7c0RBQXlCO0FBQ3hCO0lBQWYsWUFBWSxFQUFFOzBEQUFxQjtBQUNwQjtJQUFmLFlBQVksRUFBRTt1REFBd0I7QUFDdkI7SUFBZixZQUFZLEVBQUU7dURBQXdCO0FBQ3ZCO0lBQWYsWUFBWSxFQUFFO3lEQUEwQjtBQUN6QjtJQUFmLFlBQVksRUFBRTs0REFBdUI7QUFDdEI7SUFBZixZQUFZLEVBQUU7bURBQW9CO0FBRW5CO0lBQWYsWUFBWSxFQUFFO29EQUErRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNGaWxlQ29udHJvbE1vZGVsQ29uZmlnLCBEeW5hbWljRmlsZUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9keW5hbWljLWZpbGUtY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0IH0gZnJvbSBcIi4uL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUgfSBmcm9tIFwiLi4vLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGlzQm9vbGVhbiwgaXNOdW1iZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9GSUxFX1VQTE9BRCA9IFwiRklMRV9VUExPQURcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljRmlsZVVwbG9hZE1vZGVsQ29uZmlnIGV4dGVuZHMgRHluYW1pY0ZpbGVDb250cm9sTW9kZWxDb25maWcge1xuICAgIGFjY2VwdD86IHN0cmluZ1tdO1xuICAgIGF1dG9VcGxvYWQ/OiBib29sZWFuO1xuICAgIG1heFNpemU/OiBudW1iZXI7XG4gICAgbWluU2l6ZT86IG51bWJlcjtcbiAgICByZW1vdmVVcmw/OiBzdHJpbmc7XG4gICAgc2hvd0ZpbGVMaXN0PzogYm9vbGVhbjtcbiAgICB1cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBEeW5hbWljRmlsZVVwbG9hZE1vZGVsIGV4dGVuZHMgRHluYW1pY0ZpbGVDb250cm9sTW9kZWwge1xuICAgIEBzZXJpYWxpemFibGUoKSBhY2NlcHQ6IHN0cmluZ1tdIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgYXV0b1VwbG9hZDogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgbWF4U2l6ZTogbnVtYmVyIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgbWluU2l6ZTogbnVtYmVyIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgcmVtb3ZlVXJsOiBzdHJpbmcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBzaG93RmlsZUxpc3Q6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHVybDogc3RyaW5nIHwgbnVsbDtcblxuICAgIEBzZXJpYWxpemFibGUoKSByZWFkb25seSB0eXBlOiBzdHJpbmcgPSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0ZJTEVfVVBMT0FEO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEeW5hbWljRmlsZVVwbG9hZE1vZGVsQ29uZmlnLCBsYXlvdXQ/OiBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIHRoaXMuYWNjZXB0ID0gQXJyYXkuaXNBcnJheShjb25maWcuYWNjZXB0KSA/IGNvbmZpZy5hY2NlcHQgOiBudWxsO1xuICAgICAgICB0aGlzLmF1dG9VcGxvYWQgPSBpc0Jvb2xlYW4oY29uZmlnLmF1dG9VcGxvYWQpID8gY29uZmlnLmF1dG9VcGxvYWQgOiB0cnVlO1xuICAgICAgICB0aGlzLm1heFNpemUgPSBpc051bWJlcihjb25maWcubWF4U2l6ZSkgPyBjb25maWcubWF4U2l6ZSA6IG51bGw7XG4gICAgICAgIHRoaXMubWluU2l6ZSA9IGlzTnVtYmVyKGNvbmZpZy5taW5TaXplKSA/IGNvbmZpZy5taW5TaXplIDogbnVsbDtcbiAgICAgICAgdGhpcy5yZW1vdmVVcmwgPSBjb25maWcucmVtb3ZlVXJsID8/IG51bGw7XG4gICAgICAgIHRoaXMuc2hvd0ZpbGVMaXN0ID0gaXNCb29sZWFuKGNvbmZpZy5zaG93RmlsZUxpc3QpID8gY29uZmlnLnNob3dGaWxlTGlzdCA6IHRydWU7XG4gICAgICAgIHRoaXMudXJsID0gY29uZmlnLnVybCA/PyBudWxsO1xuICAgIH1cbn1cbiJdfQ==