import { __decorate } from "tslib";
import { DynamicInputControlModel } from "../dynamic-input-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isNumber } from "../../utils/core.utils";
import { isObservable, of } from "rxjs";
import { tap } from "rxjs/operators";
import { initialConfig } from "ngx-mask";
export const DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
// export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
export class DynamicInputModel extends DynamicInputControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.files = null;
        this.list$ = null;
        this._list = null;
        this._listId = null;
        this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
        this.accept = config.accept ?? null;
        this.inputType = config.inputType ?? DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
        this.mask = config.mask ?? "";
        this.maskConfig = config.maskConfig ? { ...initialConfig, ...config.maskConfig } : initialConfig;
        this.max = config.max !== undefined ? config.max : null;
        this.min = config.min !== undefined ? config.min : null;
        this.multiple = isBoolean(config.multiple) ? config.multiple : null;
        this.pattern = config.pattern ?? null;
        this.step = isNumber(config.step) ? config.step : null;
        if (config.list !== undefined) {
            this.list = config.list;
            this._listId = `${this.id}List`;
        }
    }
    get listId() {
        return this._listId;
    }
    get hasList() {
        return isObservable(this.list$);
    }
    set list(list) {
        if (Array.isArray(list)) {
            this._list = list;
            this.list$ = of(this._list);
        }
        else if (isObservable(list)) {
            this.list$ = list.pipe(tap(_list => this._list = _list));
        }
        else {
            this._list = null;
            this.list$ = null;
        }
    }
}
__decorate([
    serializable()
], DynamicInputModel.prototype, "accept", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "inputType", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "mask", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "maskConfig", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "max", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "min", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "multiple", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "pattern", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "step", void 0);
__decorate([
    serializable("list")
], DynamicInputModel.prototype, "_list", void 0);
__decorate([
    serializable()
], DynamicInputModel.prototype, "type", void 0);
//# sourceMappingURL=data:application/json;base64,