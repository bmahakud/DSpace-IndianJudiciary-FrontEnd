import { __decorate } from "tslib";
import { DynamicFormControlModel } from "../dynamic-form-control.model";
import { serializable, serialize } from "../../decorator/serializable.decorator";
import { isFunction, isNumber } from "../../utils/core.utils";
export class DynamicFormArrayGroupModel {
    constructor(context, group = [], index = -1) {
        this.$implicit = this;
        this.context = context;
        this.group = group;
        this.index = index;
    }
    get parent() {
        return this.context;
    }
    get(index) {
        return this.group[index];
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable()
], DynamicFormArrayGroupModel.prototype, "group", void 0);
__decorate([
    serializable()
], DynamicFormArrayGroupModel.prototype, "index", void 0);
export const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = "ARRAY";
export class DynamicFormArrayModel extends DynamicFormControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.groups = [];
        this.type = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
        if (isFunction(config.groupFactory)) {
            this.groupFactory = config.groupFactory;
        }
        else {
            throw new Error("group factory function must be specified for DynamicFormArrayModel");
        }
        this.groupAsyncValidators = config.groupAsyncValidators ?? null;
        this.groupPrototype = this.groupFactory();
        this.groupValidators = config.groupValidators ?? null;
        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;
        if (Array.isArray(config.groups)) {
            config.groups.forEach((arrayGroup, index) => {
                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index ?? index));
            });
        }
        else {
            for (let index = 0; index < this.initialCount; index++) {
                this.addGroup();
            }
        }
    }
    updateGroupIndex() {
        this.groups.forEach((group, index) => group.index = index);
    }
    get size() {
        return this.groups.length;
    }
    get(index) {
        return this.groups[index];
    }
    addGroup() {
        return this.insertGroup(this.groups.length);
    }
    insertGroup(index) {
        const group = new DynamicFormArrayGroupModel(this, this.groupFactory());
        this.groups.splice(index, 0, group);
        this.updateGroupIndex();
        return group;
    }
    moveGroup(index, step) {
        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));
        this.updateGroupIndex();
    }
    removeGroup(index) {
        this.groups.splice(index, 1);
        this.updateGroupIndex();
    }
    clear() {
        this.groups.splice(0);
        this.updateGroupIndex();
    }
}
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groupAsyncValidators", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groupValidators", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groups", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "initialCount", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "groupPrototype", void 0);
__decorate([
    serializable()
], DynamicFormArrayModel.prototype, "type", void 0);
//# sourceMappingURL=data:application/json;base64,