import { __decorate } from "tslib";
import { DynamicDateControlModel } from "../dynamic-date-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isString } from "../../utils/core.utils";
export const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = "DATEPICKER";
export class DynamicDatePickerModel extends DynamicDateControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;
        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        this.focusedDate = config.focusedDate ?? null;
        this.inline = isBoolean(config.inline) ? config.inline : false;
        this.prefix = config.prefix ?? null;
        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;
        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;
        this.suffix = config.suffix ?? null;
    }
}
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "autoFocus", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "focusedDate", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "inline", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "prefix", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "readOnly", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "suffix", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "toggleIcon", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "toggleLabel", void 0);
__decorate([
    serializable()
], DynamicDatePickerModel.prototype, "type", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1kYXRlcGlja2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1mb3Jtcy9jb3JlL3NyYy9saWIvbW9kZWwvZGF0ZXBpY2tlci9keW5hbWljLWRhdGVwaWNrZXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFHMUIsTUFBTSwrQkFBK0IsQ0FBQztBQUV2QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBRyxZQUFZLENBQUM7QUFhakUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHVCQUF1QjtJQVkvRCxZQUFZLE1BQW9DLEVBQUUsTUFBaUM7UUFDL0UsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUhELFNBQUksR0FBVyxvQ0FBb0MsQ0FBQztRQUt6RSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN4RSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDckUsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDNUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztJQUN4QyxDQUFDO0NBQ0o7QUF2Qm1CO0lBQWYsWUFBWSxFQUFFO3lEQUFvQjtBQUNuQjtJQUFmLFlBQVksRUFBRTsyREFBNkM7QUFDNUM7SUFBZixZQUFZLEVBQUU7c0RBQWlCO0FBQ2hCO0lBQWYsWUFBWSxFQUFFO3NEQUF1QjtBQUN0QjtJQUFmLFlBQVksRUFBRTt3REFBbUI7QUFDbEI7SUFBZixZQUFZLEVBQUU7c0RBQXVCO0FBQ3RCO0lBQWYsWUFBWSxFQUFFOzBEQUEyQjtBQUMxQjtJQUFmLFlBQVksRUFBRTsyREFBNEI7QUFFM0I7SUFBZixZQUFZLEVBQUU7b0RBQThEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEeW5hbWljRGF0ZUNvbnRyb2xNb2RlbCxcbiAgICBEeW5hbWljRGF0ZUNvbnRyb2xNb2RlbENvbmZpZyxcbiAgICBEeW5hbWljRGF0ZUNvbnRyb2xWYWx1ZVxufSBmcm9tIFwiLi4vZHluYW1pYy1kYXRlLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgc2VyaWFsaXphYmxlIH0gZnJvbSBcIi4uLy4uL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yXCI7XG5pbXBvcnQgeyBpc0Jvb2xlYW4sIGlzU3RyaW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfREFURVBJQ0tFUiA9IFwiREFURVBJQ0tFUlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNEYXRlUGlja2VyTW9kZWxDb25maWcgZXh0ZW5kcyBEeW5hbWljRGF0ZUNvbnRyb2xNb2RlbENvbmZpZyB7XG4gICAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcbiAgICBmb2N1c2VkRGF0ZT86IER5bmFtaWNEYXRlQ29udHJvbFZhbHVlO1xuICAgIGlubGluZT86IGJvb2xlYW47XG4gICAgcHJlZml4Pzogc3RyaW5nO1xuICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgICBzdWZmaXg/OiBzdHJpbmc7XG4gICAgdG9nZ2xlSWNvbj86IHN0cmluZztcbiAgICB0b2dnbGVMYWJlbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIER5bmFtaWNEYXRlUGlja2VyTW9kZWwgZXh0ZW5kcyBEeW5hbWljRGF0ZUNvbnRyb2xNb2RlbCB7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgZm9jdXNlZERhdGU6IER5bmFtaWNEYXRlQ29udHJvbFZhbHVlIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgaW5saW5lOiBib29sZWFuO1xuICAgIEBzZXJpYWxpemFibGUoKSBwcmVmaXg6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRPbmx5OiBib29sZWFuO1xuICAgIEBzZXJpYWxpemFibGUoKSBzdWZmaXg6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHRvZ2dsZUljb246IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHRvZ2dsZUxhYmVsOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfREFURVBJQ0tFUjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0RhdGVQaWNrZXJNb2RlbENvbmZpZywgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICB0aGlzLmF1dG9Gb2N1cyA9IGlzQm9vbGVhbihjb25maWcuYXV0b0ZvY3VzKSA/IGNvbmZpZy5hdXRvRm9jdXMgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2N1c2VkRGF0ZSA9IGNvbmZpZy5mb2N1c2VkRGF0ZSA/PyBudWxsO1xuICAgICAgICB0aGlzLmlubGluZSA9IGlzQm9vbGVhbihjb25maWcuaW5saW5lKSA/IGNvbmZpZy5pbmxpbmUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmVmaXggPSBjb25maWcucHJlZml4ID8/IG51bGw7XG4gICAgICAgIHRoaXMucmVhZE9ubHkgPSBpc0Jvb2xlYW4oY29uZmlnLnJlYWRPbmx5KSA/IGNvbmZpZy5yZWFkT25seSA6IGZhbHNlO1xuICAgICAgICB0aGlzLnRvZ2dsZUljb24gPSBpc1N0cmluZyhjb25maWcudG9nZ2xlSWNvbikgPyBjb25maWcudG9nZ2xlSWNvbiA6IG51bGw7XG4gICAgICAgIHRoaXMudG9nZ2xlTGFiZWwgPSBpc1N0cmluZyhjb25maWcudG9nZ2xlTGFiZWwpID8gY29uZmlnLnRvZ2dsZUxhYmVsIDogbnVsbDtcbiAgICAgICAgdGhpcy5zdWZmaXggPSBjb25maWcuc3VmZml4ID8/IG51bGw7XG4gICAgfVxufVxuIl19