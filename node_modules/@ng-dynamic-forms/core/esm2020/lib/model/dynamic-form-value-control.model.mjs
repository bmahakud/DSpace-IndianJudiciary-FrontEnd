import { __decorate } from "tslib";
import { BehaviorSubject } from "rxjs";
import { DynamicFormControlModel } from "./dynamic-form-control.model";
import { serializable } from "../decorator/serializable.decorator";
import { isBoolean, isObject } from "../utils/core.utils";
export class DynamicFormValueControlModel extends DynamicFormControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.additional = isObject(config.additional) ? config.additional : null;
        this.hint = config.hint ?? null;
        this.required = isBoolean(config.required) ? config.required : false;
        this.tabIndex = config.tabIndex ?? null;
        this._value = config.value ?? null;
        this.value$ = new BehaviorSubject(this._value);
        this.value$.subscribe(value => this._value = value);
        this.valueChanges = this.value$.asObservable();
    }
    get value() {
        return this.value$.getValue();
    }
    set value(value) {
        this.value$.next(value);
    }
    getAdditional(key, defaultValue) {
        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;
    }
}
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "additional", void 0);
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "hint", void 0);
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "required", void 0);
__decorate([
    serializable()
], DynamicFormValueControlModel.prototype, "tabIndex", void 0);
__decorate([
    serializable("value")
], DynamicFormValueControlModel.prototype, "_value", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXZhbHVlLWNvbnRyb2wubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL2NvcmUvc3JjL2xpYi9tb2RlbC9keW5hbWljLWZvcm0tdmFsdWUtY29udHJvbC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsdUJBQXVCLEVBQWlDLE1BQU0sOEJBQThCLENBQUM7QUFFdEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFVMUQsTUFBTSxPQUFnQiw0QkFBZ0MsU0FBUSx1QkFBdUI7SUFXakYsWUFBc0IsTUFBNkMsRUFBRSxNQUFpQztRQUNsRyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXRCLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDckUsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsS0FBZTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQVcsRUFBRSxZQUF5QjtRQUNoRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDakgsQ0FBQztDQUNKO0FBbkNtQjtJQUFmLFlBQVksRUFBRTtnRUFBMkM7QUFDMUM7SUFBZixZQUFZLEVBQUU7MERBQXFCO0FBQ3BCO0lBQWYsWUFBWSxFQUFFOzhEQUFtQjtBQUNsQjtJQUFmLFlBQVksRUFBRTs4REFBeUI7QUFDakI7SUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzs0REFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwsIER5bmFtaWNGb3JtQ29udHJvbE1vZGVsQ29uZmlnIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUgfSBmcm9tIFwiLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGlzQm9vbGVhbiwgaXNPYmplY3QgfSBmcm9tIFwiLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWxDb25maWc8VD4gZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbENvbmZpZyB7XG4gICAgYWRkaXRpb25hbD86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gICAgaGludD86IHN0cmluZztcbiAgICByZXF1aXJlZD86IGJvb2xlYW47XG4gICAgdGFiSW5kZXg/OiBudW1iZXI7XG4gICAgdmFsdWU/OiBUO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxUPiBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbE1vZGVsIHtcbiAgICBAc2VyaWFsaXphYmxlKCkgYWRkaXRpb25hbDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGhpbnQ6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIEBzZXJpYWxpemFibGUoKSB0YWJJbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKFwidmFsdWVcIikgcHJpdmF0ZSBfdmFsdWU6IFQgfCBudWxsO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZSQ6IEJlaGF2aW9yU3ViamVjdDxUIHwgbnVsbD47XG5cbiAgICByZWFkb25seSB2YWx1ZUNoYW5nZXM6IE9ic2VydmFibGU8VCB8IG51bGw+O1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZzxUPiwgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICB0aGlzLmFkZGl0aW9uYWwgPSBpc09iamVjdChjb25maWcuYWRkaXRpb25hbCkgPyBjb25maWcuYWRkaXRpb25hbCA6IG51bGw7XG4gICAgICAgIHRoaXMuaGludCA9IGNvbmZpZy5oaW50ID8/IG51bGw7XG4gICAgICAgIHRoaXMucmVxdWlyZWQgPSBpc0Jvb2xlYW4oY29uZmlnLnJlcXVpcmVkKSA/IGNvbmZpZy5yZXF1aXJlZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLnRhYkluZGV4ID0gY29uZmlnLnRhYkluZGV4ID8/IG51bGw7XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSBjb25maWcudmFsdWUgPz8gbnVsbDtcbiAgICAgICAgdGhpcy52YWx1ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSQuc3Vic2NyaWJlKHZhbHVlID0+IHRoaXMuX3ZhbHVlID0gdmFsdWUpO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlcyA9IHRoaXMudmFsdWUkLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBUIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlJC5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZSh2YWx1ZTogVCB8IG51bGwpIHtcbiAgICAgICAgdGhpcy52YWx1ZSQubmV4dCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0QWRkaXRpb25hbChrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55IHwgbnVsbCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZGl0aW9uYWwgIT09IG51bGwgJiYgdGhpcy5hZGRpdGlvbmFsLmhhc093blByb3BlcnR5KGtleSkgPyB0aGlzLmFkZGl0aW9uYWxba2V5XSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG59XG4iXX0=