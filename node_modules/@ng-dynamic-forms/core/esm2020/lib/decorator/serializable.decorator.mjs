import "reflect-metadata";
export const METADATA_KEY_SERIALIZABLE = "SERIALIZABLE";
export function serializable(name) {
    return (target, key) => {
        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, { key, name: name || key }, target, key);
    };
}
export function getSerializables(target) {
    const serializables = [];
    // tslint:disable-next-line:forin
    for (const key in target) {
        const metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);
        if (metadata) {
            serializables.push(metadata);
        }
    }
    return serializables;
}
export function serialize(target, prototype) {
    return getSerializables(prototype || target).reduce((prev, prop) => {
        prev[prop.name] = target[prop.key];
        return prev;
    }, {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphYmxlLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvY29yZS9zcmMvbGliL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sa0JBQWtCLENBQUM7QUFJMUIsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsY0FBYyxDQUFDO0FBT3hELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBYTtJQUN0QyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxHQUFHLEVBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0YsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxNQUFXO0lBQ3hDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUV6QixpQ0FBaUM7SUFDakMsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDdEIsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFN0UsSUFBSSxRQUFRLEVBQUU7WUFDVixhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO0tBQ0o7SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxNQUFXLEVBQUUsU0FBZTtJQUNsRCxPQUFPLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsSUFBMEIsRUFBRSxFQUFFO1FBRTFGLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVuQyxPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xuXG5kZWNsYXJlIGxldCBSZWZsZWN0OiBhbnk7XG5cbmV4cG9ydCBjb25zdCBNRVRBREFUQV9LRVlfU0VSSUFMSVpBQkxFID0gXCJTRVJJQUxJWkFCTEVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemFibGVQcm9wZXJ0eSB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXphYmxlKG5hbWU/OiBzdHJpbmcpOiAodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nKSA9PiB2b2lkIHtcbiAgICByZXR1cm4gKHRhcmdldCwga2V5KSA9PiB7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoTUVUQURBVEFfS0VZX1NFUklBTElaQUJMRSwge2tleSwgbmFtZTogbmFtZSB8fCBrZXl9LCB0YXJnZXQsIGtleSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcmlhbGl6YWJsZXModGFyZ2V0OiBhbnkpOiBTZXJpYWxpemFibGVQcm9wZXJ0eVtdIHtcbiAgICBjb25zdCBzZXJpYWxpemFibGVzID0gW107XG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWV9TRVJJQUxJWkFCTEUsIHRhcmdldCwga2V5KTtcblxuICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZXMucHVzaChtZXRhZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VyaWFsaXphYmxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSh0YXJnZXQ6IGFueSwgcHJvdG90eXBlPzogYW55KTogb2JqZWN0IHtcbiAgICByZXR1cm4gZ2V0U2VyaWFsaXphYmxlcyhwcm90b3R5cGUgfHwgdGFyZ2V0KS5yZWR1Y2UoKHByZXY6IGFueSwgcHJvcDogU2VyaWFsaXphYmxlUHJvcGVydHkpID0+IHtcblxuICAgICAgICBwcmV2W3Byb3AubmFtZV0gPSB0YXJnZXRbcHJvcC5rZXldO1xuXG4gICAgICAgIHJldHVybiBwcmV2O1xuXG4gICAgfSwge30pO1xufVxuIl19