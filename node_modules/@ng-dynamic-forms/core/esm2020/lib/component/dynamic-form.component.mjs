import { Directive, QueryList } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "../service/dynamic-form-component.service";
// tslint:disable-next-line:directive-class-suffix
export class DynamicFormComponent {
    constructor(changeDetectorRef, componentService) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentService = componentService;
    }
    ngOnInit() {
        this.componentService.registerForm(this);
    }
    ngOnDestroy() {
        this.componentService.unregisterForm(this);
    }
    trackByFn(_index, model) {
        return model.id;
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
        if (this.components instanceof QueryList) {
            this.components.forEach(component => component.markForCheck());
        }
    }
    detectChanges() {
        this.changeDetectorRef.detectChanges();
    }
    onBlur($event) {
        this.blur?.emit($event);
    }
    onChange($event) {
        this.change?.emit($event);
    }
    onFocus($event) {
        this.focus?.emit($event);
    }
    onCustomEvent($event, customEventEmitter) {
        customEventEmitter.emit($event);
    }
}
DynamicFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DynamicFormComponentService }], target: i0.ɵɵFactoryTarget.Directive });
DynamicFormComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: DynamicFormComponent, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: DynamicFormComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DynamicFormComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvY29yZS9zcmMvbGliL2NvbXBvbmVudC9keW5hbWljLWZvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBcUIsU0FBUyxFQUFtQyxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVd6RyxrREFBa0Q7QUFDbEQsTUFBTSxPQUFnQixvQkFBb0I7SUFZdEMsWUFBZ0MsaUJBQW9DLEVBQVksZ0JBQTZDO1FBQTdGLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFBWSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQTZCO0lBQzdILENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFjLEVBQUUsS0FBOEI7UUFDcEQsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXRDLElBQUksSUFBSSxDQUFDLFVBQVUsWUFBWSxTQUFTLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztTQUNsRTtJQUNMLENBQUM7SUFFRCxhQUFhO1FBQ1QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBK0I7UUFDbEMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUErQjtRQUNwQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQStCO1FBQ25DLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxhQUFhLENBQUMsTUFBK0IsRUFBRSxrQkFBeUQ7UUFDcEcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O2lIQXJEaUIsb0JBQW9CO3FHQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFGekMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBVbnR5cGVkRm9ybUdyb3VwIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xDb250YWluZXJDb21wb25lbnQgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tY29udHJvbC1jb250YWluZXIuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xFdmVudCB9IGZyb20gXCIuL2R5bmFtaWMtZm9ybS1jb250cm9sLWV2ZW50XCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9tb2RlbC9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Nb2RlbCB9IGZyb20gXCIuLi9tb2RlbC9keW5hbWljLWZvcm0ubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmUvZHluYW1pYy10ZW1wbGF0ZS5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtTGF5b3V0IH0gZnJvbSBcIi4uL3NlcnZpY2UvZHluYW1pYy1mb3JtLWxheW91dC5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbXBvbmVudFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9keW5hbWljLWZvcm0tY29tcG9uZW50LnNlcnZpY2VcIjtcblxuQERpcmVjdGl2ZSgpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER5bmFtaWNGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIGdyb3VwITogVW50eXBlZEZvcm1Hcm91cDtcbiAgICBtb2RlbCE6IER5bmFtaWNGb3JtTW9kZWw7XG4gICAgbGF5b3V0PzogRHluYW1pY0Zvcm1MYXlvdXQ7XG5cbiAgICBjb21wb25lbnRzITogUXVlcnlMaXN0PER5bmFtaWNGb3JtQ29udHJvbENvbnRhaW5lckNvbXBvbmVudD47XG4gICAgdGVtcGxhdGVzITogUXVlcnlMaXN0PER5bmFtaWNUZW1wbGF0ZURpcmVjdGl2ZT47XG5cbiAgICBibHVyPzogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PjtcbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8RHluYW1pY0Zvcm1Db250cm9sRXZlbnQ+O1xuICAgIGZvY3VzPzogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PjtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcm90ZWN0ZWQgY29tcG9uZW50U2VydmljZTogRHluYW1pY0Zvcm1Db21wb25lbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50U2VydmljZS5yZWdpc3RlckZvcm0odGhpcyk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50U2VydmljZS51bnJlZ2lzdGVyRm9ybSh0aGlzKTtcbiAgICB9XG5cbiAgICB0cmFja0J5Rm4oX2luZGV4OiBudW1iZXIsIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBtb2RlbC5pZDtcbiAgICB9XG5cbiAgICBtYXJrRm9yQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cyBpbnN0YW5jZW9mIFF1ZXJ5TGlzdCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLmZvckVhY2goY29tcG9uZW50ID0+IGNvbXBvbmVudC5tYXJrRm9yQ2hlY2soKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXRlY3RDaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBvbkJsdXIoJGV2ZW50OiBEeW5hbWljRm9ybUNvbnRyb2xFdmVudCkge1xuICAgICAgICB0aGlzLmJsdXI/LmVtaXQoJGV2ZW50KTtcbiAgICB9XG5cbiAgICBvbkNoYW5nZSgkZXZlbnQ6IER5bmFtaWNGb3JtQ29udHJvbEV2ZW50KSB7XG4gICAgICAgIHRoaXMuY2hhbmdlPy5lbWl0KCRldmVudCk7XG4gICAgfVxuXG4gICAgb25Gb2N1cygkZXZlbnQ6IER5bmFtaWNGb3JtQ29udHJvbEV2ZW50KSB7XG4gICAgICAgIHRoaXMuZm9jdXM/LmVtaXQoJGV2ZW50KTtcbiAgICB9XG5cbiAgICBvbkN1c3RvbUV2ZW50KCRldmVudDogRHluYW1pY0Zvcm1Db250cm9sRXZlbnQsIGN1c3RvbUV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50Pikge1xuICAgICAgICBjdXN0b21FdmVudEVtaXR0ZXIuZW1pdCgkZXZlbnQpO1xuICAgIH1cbn1cbiJdfQ==